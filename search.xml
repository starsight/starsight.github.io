<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[个人简历]]></title>
      <url>http://wenjiehe.com/2099/12/31/resume/</url>
      <content type="html"><![CDATA[<p>求职岗位：Android开发工程师</p>
<h3 id="基本信息"><a href="#基本信息" class="headerlink" title="基本信息"></a>基本信息</h3><p>姓名：贺文杰</p>
<p>性别：男</p>
<p>籍贯：江苏镇江<a id="more"></a></p>
<p>邮箱：YWRtaW5Ad2VuamllaGUuY29t  （<a href="https://www.base64decode.org/" target="_blank" rel="external">https://www.base64decode.org/</a> BASE64解码）</p>
<h3 id="教育情况"><a href="#教育情况" class="headerlink" title="教育情况"></a>教育情况</h3><p>本科：长安大学</p>
<p>时间：2012.09 ~ 2016.07</p>
<p>备注：专业第一</p>
<p>硕士：东南大学</p>
<p>时间：2016.09 ~ 2019.07（预计）</p>
<p>备注：推免</p>
<h3 id="项目实践"><a href="#项目实践" class="headerlink" title="项目实践"></a>项目实践</h3><p><strong>行迹 Android客户端</strong>     2016.05 - 2017.01<br>基于位置签到分享的应用，主要功能有登录注册，位置签到，数据管理，附近的人签到分享等。<br>Android客户端设计与实现，包括UI适配，信息流，通信和存储等，对各个Android版本进行适配。</p>
<p><strong>医疗检测仪器LIS中间件系统研究开发（英诺华医疗技术有限公司）</strong>   2017.02 - 2017.08<br>基于WPF架构设计客户端软件，实现LIS服务器与医疗检测设备的通信等。<br>多线程技术软件设计，多协议（HL7/ASTM）解析封装库，LIS中间件服务器搭建与功能实现。</p>
<p><strong>ST语言编译器衍生数据结构的解析与加载</strong>    2018.01 - 至今<br>在语法词法分析的基础上，完成结构体和数组存储赋值、函数和功能块调用过程的编译。<br>将生成的二进制文件载入虚拟机中完成解释执行。</p>
<p><strong>干货集中营 Android客户端</strong>    2018.04 - 2018.06<br>基于MVP设计模式，采用OkHttp, Retrofit, RxJava, Glide等构建项目。<br>在干货集中营（gank.io）API基础上，采用FlipBoard翻页风格的布局形式主布局。<br>对实体数据加载机制（网络、内存、数据库）和页面数据加载做缓存等优化。</p>
<p><strong>双通道全自动血小板功能分析仪系统开发（英诺华医疗技术有限公司）</strong><br>血小板功能分析仪系统开发与升级，负责将基于ARMv9的分析仪升级为Cortex-A8处理器的系统，在嵌入式Linux系统上运行一个MiniGUI的图形框架，完成分析仪的控制管理功能，同时针对新屏幕做了适配。</p>
<h3 id="专业技能"><a href="#专业技能" class="headerlink" title="专业技能"></a>专业技能</h3><p>熟悉Java编程语言，有较扎实的Java集合与并发基础<br>熟悉常见的数据结构及算法，掌握Java虚拟机基本特性<br>熟悉TCP/IP、HTTP等计算机网络知识，了解移动应用网络优化方案<br>阅读过事件分发、Handler、AsyncTask、RecyclerView等Android源码<br>掌握OkHttp、Volley、EventBus、Glide等开源框架设计思路，有绘制轻量级自定义View经验<br>了解嵌入式Linux应用与驱动程序开发，了解MCU（ARM）软硬件开发<br>英语CET-6（505分），计算机四级（网络）</p>
<h3 id="荣誉与竞赛获奖"><a href="#荣誉与竞赛获奖" class="headerlink" title="荣誉与竞赛获奖"></a>荣誉与竞赛获奖</h3><p>2013-2014学年 国家励志奖学金<br>2014-2015学年 国家奖学金</p>
<p>小爱同学技能开发大赛优秀奖             2018.07<br>华为“创想杯”校园开发者大赛50强           2017.05<br>2017年华为软件精英挑战赛江山赛区64强         2017.04<br>2015年全国大学生飞思卡尔杯智能汽车竞赛全国二等奖，西部赛区一等奖        2015.08<br>2014年全国电子设计大赛陕西省TI杯三等奖        2014.08<br>2014年挑战杯“基于Android的人眼立体视觉检查”校二等奖         2014.06</p>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>GitHub：<a href="https://github.com/starsight" target="_blank" rel="external">https://github.com/starsight</a><br>论 文：Implementation Approaches of Medical Analyzer Management System Software（ICIEA 2018，EI检索)<br>个人爱好：天文</p>
<h3 id="照片"><a href="#照片" class="headerlink" title="照片"></a>照片</h3><p><img src="/images/resume.jpg" alt=""></p>
]]></content>
      
        <categories>
            
            <category> 2099-12 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> resume </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[翻页效果的RecyclerView]]></title>
      <url>http://wenjiehe.com/2018/07/20/Flip-RecyclerView/</url>
      <content type="html"><![CDATA[<p>实现一个自定义LayoutManager，默认只有一个抽象方法，实现的重点在于onLayoutChildren对页面的布局和滑动操作，当然还有缓存。</p>
<h3 id="属性定义"><a href="#属性定义" class="headerlink" title="属性定义"></a>属性定义</h3><p>mPosition是当前item的位置信息，mPositionOffset是偏移信息，mMinVy是最低的y方向的速度，这个需要根据不同屏幕尺寸来定。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MIN_VY = <span class="number">300</span>;</div><div class="line"><span class="keyword">private</span> <span class="keyword">int</span> mPosition = <span class="number">0</span>;</div><div class="line"><span class="keyword">private</span> <span class="keyword">int</span> mPositionOffset = <span class="number">0</span>;</div><div class="line"><span class="keyword">private</span> <span class="keyword">int</span> mMinVy = <span class="number">0</span>;</div><div class="line"><span class="keyword">private</span> Context mContext;</div></pre></td></tr></table></figure>
<h3 id="布局流程"><a href="#布局流程" class="headerlink" title="布局流程"></a>布局流程</h3><p>为了实现翻页效果，每次滑动都是有前景页和背景页。当翻页时，如果flip没有超过一半，当前页是primary（前景页），下一页是secondary（背景页）；当超过一半当前页已经是“下一页”（背景页）了，而刚才的当前页变成了上一页（前景页）。<a id="more"></a>值得注意的是，需要把需要把item布局文件的<strong>背景设置成白色</strong>，不然会有重叠效果。翻页效果在FlipCard中实现。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onLayoutChildren</span><span class="params">(RecyclerView.Recycler recycler, RecyclerView.State state)</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">//如果没有item，直接返回</span></div><div class="line">    <span class="keyword">if</span> (getItemCount() &lt;= <span class="number">0</span>) &#123;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 跳过preLayout，preLayout主要用于支持动画</span></div><div class="line">    <span class="keyword">if</span> (state.isPreLayout()) &#123;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    fill(recycler, state);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">fill</span><span class="params">(RecyclerView.Recycler recycler, RecyclerView.State state)</span> </span>&#123;</div><div class="line"></div><div class="line">        checkPosition(state);</div><div class="line"></div><div class="line">        View primary;</div><div class="line">        View pre = <span class="keyword">null</span>;</div><div class="line">        View next = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">        detachAndScrapAttachedViews(recycler);</div><div class="line"></div><div class="line">    	<span class="comment">// 当前页</span></div><div class="line">        primary = recycler.getViewForPosition(mPosition);</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (mPosition + <span class="number">1</span> &lt; state.getItemCount()) &#123;</div><div class="line">            <span class="comment">// 下一页</span></div><div class="line">            next = recycler.getViewForPosition(mPosition + <span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (mPosition - <span class="number">1</span> &gt;= <span class="number">0</span>) &#123;</div><div class="line">            <span class="comment">// 上一页</span></div><div class="line">            pre = recycler.getViewForPosition(mPosition - <span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line">        View secondary = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">    	<span class="comment">// 根据偏移计算是需要上一页还是下一页</span></div><div class="line">        <span class="keyword">if</span> (mPositionOffset &gt; <span class="number">0</span>) &#123;</div><div class="line">            secondary = next;</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (mPositionOffset &lt; <span class="number">0</span>) &#123;</div><div class="line">            secondary = pre;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (mPositionOffset != <span class="number">0</span> &amp;&amp; secondary != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="comment">// 存在背景页就添加</span></div><div class="line">            addView(secondary);</div><div class="line">            measureChildWithMargins(secondary, <span class="number">0</span>, <span class="number">0</span>);</div><div class="line">            layoutDecorated(secondary, <span class="number">0</span>, <span class="number">0</span>, getWidth(), getHeight());</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    	<span class="comment">// 回收另一页的信息</span></div><div class="line">        <span class="keyword">if</span> (pre != <span class="keyword">null</span> &amp;&amp; secondary !=pre) &#123;</div><div class="line">            recycler.recycleView(pre);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (next != <span class="keyword">null</span> &amp;&amp; secondary !=next) &#123;</div><div class="line">            recycler.recycleView(next);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    	<span class="comment">// 添加当前页作为前景页</span></div><div class="line">        addView(primary);</div><div class="line">        measureChildWithMargins(primary, <span class="number">0</span>, <span class="number">0</span>);</div><div class="line">        layoutDecorated(primary, <span class="number">0</span>, <span class="number">0</span>, getWidth(), getHeight());</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (primary <span class="keyword">instanceof</span> FlipCard &amp;&amp; (secondary == <span class="keyword">null</span> || secondary <span class="keyword">instanceof</span> FlipCard)) &#123;</div><div class="line">            <span class="keyword">final</span> <span class="keyword">float</span> percent = (<span class="keyword">float</span>) mPositionOffset / getItemHeightPositon();</div><div class="line">            <span class="comment">// 计算滑动比例，得到flip效果</span></div><div class="line">            Log.d(TAG, <span class="string">"fill: "</span>+percent);</div><div class="line">            <span class="keyword">if</span> (secondary != <span class="keyword">null</span>) &#123;</div><div class="line">                ((FlipCard) secondary).setState(<span class="keyword">false</span>, percent);</div><div class="line">                ((FlipCard) primary).setState(<span class="keyword">true</span>, percent);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="comment">// 当在第一页或最后一页时不存在背景页（留白/刷新等）</span></div><div class="line">                ((FlipCard) primary).setState(<span class="keyword">true</span>, percent);</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"view should be FlipCard"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">checkPosition</span><span class="params">(RecyclerView.State state)</span> </span>&#123;</div><div class="line">        <span class="comment">// 页面最多能滑动到 -2/5*itemHeight ~ itemHeight*(state.getItemCount()-1) + itemHeight*2/5</span></div><div class="line">        <span class="keyword">final</span> <span class="keyword">int</span> itemHeight = getItemHeightPositon();</div><div class="line">        <span class="keyword">final</span> <span class="keyword">int</span> current = mPosition * itemHeight + mPositionOffset;</div><div class="line">        <span class="keyword">final</span> <span class="keyword">int</span> max = itemHeight * (state.getItemCount() - <span class="number">1</span>) + itemHeight * <span class="number">2</span> / <span class="number">5</span>;</div><div class="line"></div><div class="line">        <span class="keyword">int</span> pos = Math.max(-itemHeight * <span class="number">2</span> / <span class="number">5</span>, Math.min(current, max));</div><div class="line">        mPosition = Math.round(pos / (<span class="keyword">float</span>)itemHeight);</div><div class="line">        mPosition = mPosition &gt;= <span class="number">0</span> ? mPosition : <span class="number">0</span>;</div><div class="line">        mPositionOffset = pos - mPosition * itemHeight;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>为了使翻页效果流畅，设置每一页的高度都是实际高度的2/3，这样避免完全滑满一个屏幕才完成翻页效果（不考虑惯性滑动）。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 这样把一个item的高度设为了原来的2/3，直观的结果就是只要滑动2/3就相当于过了一个item</span></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">getItemHeightInPositon</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> getHeight() * <span class="number">2</span> / <span class="number">3</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="滑动"><a href="#滑动" class="headerlink" title="滑动"></a>滑动</h3><p>完成上述步骤自然还不能滑动</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">canScrollVertically</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="comment">// 纵向可滑</span></div><div class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">scrollVerticallyBy</span><span class="params">(<span class="keyword">int</span> dy, RecyclerView.Recycler recycler, RecyclerView.State state)</span> </span>&#123;</div><div class="line">    <span class="keyword">final</span> <span class="keyword">int</span> before = mPosition * getItemHeightPositon() + mPositionOffset;</div><div class="line"></div><div class="line">    mPositionOffset += dy;</div><div class="line">    checkPosition(state);</div><div class="line">    <span class="keyword">final</span> <span class="keyword">int</span> after = mPosition * getItemHeightPositon() + mPositionOffset;</div><div class="line"></div><div class="line">    <span class="keyword">final</span> <span class="keyword">int</span> ans = after - before;</div><div class="line">    fill(recycler, state);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> ans;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">scrollToPosition</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line">    mPosition = position;</div><div class="line">    mPositionOffset = <span class="number">0</span>;</div><div class="line">    requestLayout();</div><div class="line">    Log.d(TAG, <span class="string">"scrollToPosition "</span> + position + <span class="string">" position "</span> + mPosition + <span class="string">" positionOffset "</span> + mPositionOffset);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 平稳滑动</span></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">smoothScrollToPosition</span><span class="params">(RecyclerView recyclerView, RecyclerView.State state, <span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line">    Log.d(TAG, <span class="string">"smoothScrollTo "</span> + position + <span class="string">" position "</span> + mPosition + <span class="string">" positionOffset "</span> + mPositionOffset);</div><div class="line"></div><div class="line">    FlipScroller scroller = <span class="keyword">new</span> FlipScroller(recyclerView.getContext());</div><div class="line">    scroller.setTargetPosition(position);</div><div class="line">    startSmoothScroll(scroller);</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">FlipScroller</span> <span class="keyword">extends</span> <span class="title">LinearSmoothScroller</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"FlipScroller"</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FlipScroller</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(context);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onStop</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onStop();</div><div class="line">        Log.d(TAG, <span class="string">"onStop: "</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">calculateDyToMakeVisible</span><span class="params">(View view, <span class="keyword">int</span> snapPreference)</span> </span>&#123;</div><div class="line">        <span class="keyword">final</span> <span class="keyword">int</span> position = getPosition(view);</div><div class="line">        <span class="keyword">final</span> <span class="keyword">int</span> now = mPositionOffset + mPosition * getItemHeightPositon();</div><div class="line">        <span class="keyword">final</span> <span class="keyword">int</span> to = position * getItemHeightPositon();</div><div class="line">        Log.d(TAG, <span class="string">"calculateDyToMakeVisible: position "</span> + position + <span class="string">" ans "</span> + (to - now));</div><div class="line">        <span class="keyword">return</span> (now - to);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">calculateDxToMakeVisible</span><span class="params">(View view, <span class="keyword">int</span> snapPreference)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">int</span> <span class="title">calculateTimeForScrolling</span><span class="params">(<span class="keyword">int</span> dx)</span> </span>&#123;</div><div class="line"></div><div class="line">        Log.d(TAG, <span class="string">"calculateTimeForScrolling: "</span>);</div><div class="line">        <span class="keyword">int</span> time = <span class="keyword">super</span>.calculateTimeForScrolling(dx*<span class="number">5</span>);</div><div class="line"></div><div class="line">        <span class="keyword">return</span> time;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"><span class="comment">/*</span></div><div class="line">以下四个方法是为了滑动时的对齐操作，不至于滑了半页然后就停在那</div><div class="line">详细可看：https://www.jianshu.com/p/e54db232df62</div><div class="line">*/</div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> PointF <span class="title">computeScrollVectorForPosition</span><span class="params">(<span class="keyword">int</span> targetPosition)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> dir = <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> now = mPosition * getItemHeightPositon() + mPositionOffset;</div><div class="line">    <span class="keyword">int</span> to = targetPosition * getItemHeightPositon();</div><div class="line">    <span class="keyword">if</span> (now &gt; to) &#123;</div><div class="line">        dir = -<span class="number">1</span>;</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (now &lt; to) &#123;</div><div class="line">        dir = <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    Log.d(TAG, <span class="string">"computeScrollVector "</span> + dir + <span class="string">" now "</span> + mPosition + <span class="string">" target "</span> + targetPosition);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> PointF(<span class="number">0</span>, dir);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">calculateDistance</span><span class="params">(View view)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> pos = getPosition(view);</div><div class="line">    <span class="keyword">final</span> <span class="keyword">int</span> now = getItemHeightPositon() * mPosition + mPositionOffset;</div><div class="line">    <span class="keyword">final</span> <span class="keyword">int</span> to = getItemHeightPositon() * pos;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> to - now;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findTargetPosition</span><span class="params">(<span class="keyword">int</span> vY)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> ans = mPosition;</div><div class="line">    Log.d(TAG, <span class="string">"findTargetPosition: "</span>+vY+<span class="string">"~"</span>+mPositionOffset);</div><div class="line">    <span class="keyword">int</span> absV = vY &gt; <span class="number">0</span> ? vY : -vY;</div><div class="line">    <span class="keyword">if</span> (absV &gt; mMinVy) &#123;</div><div class="line">        <span class="keyword">if</span> (vY * mPositionOffset &gt; <span class="number">0</span>) &#123;</div><div class="line">            <span class="comment">// 速度与位置偏移同向</span></div><div class="line">            <span class="keyword">int</span> d = vY &gt; <span class="number">0</span> ? <span class="number">1</span> : -<span class="number">1</span>;</div><div class="line">            ans += d;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            ans = mPosition;</div><div class="line">        &#125;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        ans = mPosition;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> count = getItemCount();</div><div class="line">    <span class="keyword">if</span> (count == <span class="number">0</span>) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    ans = Math.min(count - <span class="number">1</span>, Math.max(<span class="number">0</span>, ans));</div><div class="line">    <span class="keyword">return</span> ans;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> View <span class="title">findSnapView</span><span class="params">()</span> </span>&#123;</div><div class="line">    Log.d(TAG, <span class="string">"findSnapView: "</span>+getChildCount()+<span class="string">"~"</span>+getItemCount());</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; getChildCount(); i ++ )&#123;</div><div class="line">        View child = getChildAt(i);</div><div class="line">        <span class="keyword">if</span> (getPosition(child) == mPosition) &#123;</div><div class="line">            <span class="keyword">return</span> child;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 滑动时的对齐操作</span></div><div class="line"><span class="comment">// 惯性滑动先根据findTargetSnapPosition()计算到TargetSnapView，再根据calculateDistanceToFinalSnap()计算到TargetSnapView与对齐位置的剩余距离。普通滑动就是等到滑动停止，findSnapView()找到需要对齐的View即SanpView，再calculateDistanceToFinalSnap()计算得到额外的滑动距离。</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MySnap</span> <span class="keyword">extends</span> <span class="title">SnapHelper</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"MySnap"</span>;</div><div class="line"></div><div class="line">    <span class="meta">@Nullable</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] calculateDistanceToFinalSnap(<span class="meta">@NonNull</span> RecyclerView.LayoutManager layoutManager, <span class="meta">@NonNull</span> View targetView) &#123;</div><div class="line">        <span class="keyword">if</span> (layoutManager <span class="keyword">instanceof</span> CustomLayoutManager) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">0</span>, ((CustomLayoutManager) layoutManager).calculateDistance(targetView)&#125;;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Nullable</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> View <span class="title">findSnapView</span><span class="params">(RecyclerView.LayoutManager layoutManager)</span> </span>&#123;</div><div class="line">        CustomLayoutManager flipLayoutManager = (CustomLayoutManager) layoutManager;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> flipLayoutManager.findSnapView();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findTargetSnapPosition</span><span class="params">(RecyclerView.LayoutManager layoutManager, <span class="keyword">int</span> velocityX, <span class="keyword">int</span> velocityY)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (layoutManager <span class="keyword">instanceof</span> CustomLayoutManager) &#123;</div><div class="line">            <span class="keyword">return</span> ((CustomLayoutManager) layoutManager).findTargetPosition(velocityY);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="翻页View"><a href="#翻页View" class="headerlink" title="翻页View"></a>翻页View</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FlipCard</span> <span class="keyword">extends</span> <span class="title">FrameLayout</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"FlipCard"</span>;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Paint mScrimPaint;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Camera mCamera;</div><div class="line">    <span class="keyword">private</span> Matrix mMatrix;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> mIsForground;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">float</span> mPercent;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FlipCard</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>(context, <span class="keyword">null</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FlipCard</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>(context, attrs, <span class="number">0</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FlipCard</span><span class="params">(Context context, AttributeSet attrs, <span class="keyword">int</span> defStyleAttr)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(context, attrs, defStyleAttr);</div><div class="line"></div><div class="line">        mScrimPaint = <span class="keyword">new</span> Paint();</div><div class="line">        mCamera = <span class="keyword">new</span> Camera();</div><div class="line">        mMatrix = <span class="keyword">new</span> Matrix();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setState</span><span class="params">(<span class="keyword">boolean</span> isForground, <span class="keyword">float</span> percent)</span> </span>&#123;</div><div class="line">        mIsForground = isForground;</div><div class="line">        mPercent = percent;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">(Canvas canvas)</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (mPercent == <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">super</span>.draw(canvas);</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">final</span> <span class="keyword">int</span> height = canvas.getHeight();</div><div class="line">        <span class="keyword">final</span> <span class="keyword">int</span> width = canvas.getWidth();</div><div class="line">        <span class="keyword">final</span> <span class="keyword">float</span> percent = mPercent &gt; <span class="number">0</span> ? mPercent : -mPercent;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (mIsForground) &#123;</div><div class="line">            <span class="comment">// clip card effect for forground view</span></div><div class="line">            <span class="comment">// draw part1</span></div><div class="line">            <span class="keyword">int</span> save1 = canvas.save();</div><div class="line">            <span class="keyword">if</span> (mPercent &gt; <span class="number">0</span>) &#123;</div><div class="line">                canvas.clipRect(<span class="number">0</span>, <span class="number">0</span>, width, height / <span class="number">2</span>);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                canvas.clipRect(<span class="number">0</span>, height / <span class="number">2</span>, width, height);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">super</span>.draw(canvas);</div><div class="line">            canvas.restoreToCount(save1);</div><div class="line"></div><div class="line">            <span class="comment">// draw part2</span></div><div class="line">            <span class="keyword">if</span> (mPercent &lt; <span class="number">0</span>) &#123;</div><div class="line">                canvas.clipRect(<span class="number">0</span>, <span class="number">0</span>, width, height / <span class="number">2</span>);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                canvas.clipRect(<span class="number">0</span>, height / <span class="number">2</span>, width, height);</div><div class="line">            &#125;</div><div class="line">            mCamera.save();</div><div class="line">            mCamera.setLocation(<span class="number">0f</span>, <span class="number">0f</span>, -<span class="number">80</span>);</div><div class="line">            mCamera.rotateX(mPercent * <span class="number">180</span>);</div><div class="line">            mCamera.getMatrix(mMatrix);</div><div class="line">            mCamera.restore();</div><div class="line">            mMatrix.preTranslate(-width / <span class="number">2</span>, -height / <span class="number">2</span>);</div><div class="line">            mMatrix.postTranslate(width / <span class="number">2</span>, height / <span class="number">2</span>);</div><div class="line">            canvas.concat(mMatrix);</div><div class="line">            <span class="keyword">super</span>.draw(canvas);</div><div class="line"></div><div class="line">            mScrimPaint.setColor(<span class="number">0x08000000</span>);</div><div class="line">            canvas.drawRect(<span class="number">0</span>, <span class="number">0</span>, width, height, mScrimPaint);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="comment">// 作为背景，不需要有flip效果，只需要切出一半view展示出来即可</span></div><div class="line">            <span class="comment">// draw shadow for underground view</span></div><div class="line">            <span class="keyword">final</span> <span class="keyword">int</span> scrimColor = (<span class="keyword">int</span>) (<span class="number">0xff</span> * (<span class="number">1</span> - percent * <span class="number">2</span>)) &lt;&lt; <span class="number">24</span>;</div><div class="line">            mScrimPaint.setColor(scrimColor);</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (mPercent &lt; <span class="number">0</span>) &#123;</div><div class="line">                canvas.clipRect(<span class="number">0</span>, <span class="number">0</span>, width, height / <span class="number">2</span>);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                canvas.clipRect(<span class="number">0</span>, height / <span class="number">2</span>, width, height);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">super</span>.draw(canvas);</div><div class="line">            canvas.drawRect(<span class="number">0</span>, <span class="number">0</span>, width, height, mScrimPaint);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">customLayoutManager = <span class="keyword">new</span> CustomLayoutManager(<span class="keyword">this</span>);</div><div class="line">recyclerView.setLayoutManager(customLayoutManager);</div><div class="line">adapter = <span class="keyword">new</span> CustomAdapter(myData,MainActivity.<span class="keyword">this</span>);</div><div class="line">recyclerView.setAdapter(adapter);</div><div class="line"></div><div class="line">MySnap snap = <span class="keyword">new</span> MySnap();</div><div class="line">snap.attachToRecyclerView(recyclerView);</div></pre></td></tr></table></figure>
<h3 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h3><p>翻页效果带来了本身其滑动范围有限，依次只能上下翻页，因为对于缓存，首先稍微设置mCacheViews大一些，默认为2，由于每次翻页会绑定下一页，因此我设置为3来保证由本页（例：1）翻到下一页（例：2）时，不会因为加载再下一页（例：3）而导致原来的上一页（例：0）被回收。</p>
<p>另一项策略时预加载Prefetch，对于自定义LayoutManager，需要重写<a href="https://developer.android.com/reference/android/support/v7/widget/RecyclerView.LayoutManager.html#collectAdjacentPrefetchPositions%28int,%20int,%20android.support.v7.widget.RecyclerView.State,%20android.support.v7.widget.RecyclerView.LayoutManager.LayoutPrefetchRegistry%29" target="_blank" rel="external">LayoutManager.collectAdjacentPrefetchPositions()</a>方法，可以参考LinearLayoutManager实现。</p>
<p>包含完整源码的项目：<a href="https://github.com/starsight/Gank" target="_blank" rel="external">https://github.com/starsight/Gank</a></p>
<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p><a href="https://www.jianshu.com/p/e54db232df62" target="_blank" rel="external">让你明明白白的使用RecyclerView——SnapHelper详解</a></p>
<p><a href="https://medium.com/google-developers/recyclerview-prefetch-c2f269075710" target="_blank" rel="external">https://medium.com/google-developers/recyclerview-prefetch-c2f269075710</a></p>
<p><a href="https://mp.weixin.qq.com/s?__biz=MzA3NTYzODYzMg==&amp;mid=2653578065&amp;idx=2&amp;sn=25e64a8bb7b5934cf0ce2e49549a80d6&amp;chksm=84b3b156b3c43840061c28869671da915a25cf3be54891f040a3532e1bb17f9d32e244b79e3f&amp;mpshare=1&amp;scene=1&amp;srcid=0626Dl0bjG3664qJlKb7RSlq#rd" target="_blank" rel="external">Android ListView 与 RecyclerView 对比浅析–缓存机制</a></p>
]]></content>
      
        <categories>
            
            <category> 2018-07 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> android </tag>
            
            <tag> recycleView </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[小爱技能开发大赛-抽签技能开发分享]]></title>
      <url>http://wenjiehe.com/2018/06/27/Xiaoai/</url>
      <content type="html"><![CDATA[<p>“抽签”技能的开发流程基本沿袭官方给出的<a href="https://xiaoai.mi.com/documents/Home?type=/api/doc/render_markdown/SkillAccess/SkillDocument/HelloWorld" target="_blank" rel="external">Hello World</a>的开发方式。</p>
<p>首先明确技能的功能，一般而言，抽签包括两个步骤，设置抽签人数，依次开始抽签。<a id="more"></a>此外还需要支持查看已经抽签的结果。再看应用场景，因为技能的对象面向于智能音箱，而音箱的人机交互方式只有通过语音进行，所以对于给用户的交互过程既要保证功能的准确传达，又要保证其简洁与稳定。</p>
<p>针对上述要求，小爱开发平台使用意图与词表的交互模型，意图基于词表，平台内置了常见的词表，如颜色、数字、国家等。本技能为了追求开发准确与高效，未自定义词表，使用内置词表完成意图构建。</p>
<p>本技能的意图针对其功能划分为三部分，分别是抽签人数的设置，签号的抽取，查看抽签结果，其中抽签人数的设置需要使用数字词表。构建的意图如下。</p>
<img src="/images/xiaoai-table.png">
<p>接下来小爱平台会根据用户输入信息整合成服务器-客户端常见的<code>JSON</code>形式的<code>request</code>发向服务器，接下来就是开发者要完成的主体部分了。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> xiaoai <span class="keyword">import</span> *</div><div class="line"><span class="keyword">import</span> random</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">outputJson</span><span class="params">(toSpeakText, is_session_end, attribute=None, openMic=True)</span>:</span></div><div class="line">    xiaoAIResponse=XiaoAIResponse(to_speak=XiaoAIToSpeak(type_=<span class="number">0</span>, text=toSpeakText), open_mic=openMic)</div><div class="line">    response = xiaoai_response(XiaoAIOpenResponse(version=<span class="string">"1.0"</span>,is_session_end=is_session_end,response=xiaoAIResponse,session_attributes=attribute))</div><div class="line">    <span class="keyword">return</span> response</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">(event)</span>:</span></div><div class="line">    req = xiaoai_request(event)</div><div class="line">    sum_person = <span class="number">0</span></div><div class="line">    selected_num = <span class="number">0</span></div><div class="line">    rand =<span class="number">0</span></div><div class="line">    count = <span class="number">0</span></div><div class="line">    dictionary = &#123;&#125;</div><div class="line">    attribute = &#123;<span class="string">"sum_person"</span>:<span class="number">0</span>&#125;</div><div class="line">    <span class="keyword">if</span> req.request.type == <span class="number">0</span>:</div><div class="line">        attribute[<span class="string">'sum_person'</span>] = <span class="number">200</span></div><div class="line">        attribute[<span class="string">'dictionary'</span>] = dictionary</div><div class="line">        attribute[<span class="string">"selected_num"</span>] = <span class="number">0</span></div><div class="line">        <span class="keyword">return</span> outputJson(<span class="string">"欢迎进入抽签小工具，请先向小爱说明抽签人数，如 一共10个人"</span>, <span class="keyword">False</span>, attribute)</div><div class="line">    <span class="keyword">elif</span> req.request.type == <span class="number">1</span>:</div><div class="line">        <span class="keyword">if</span> ((<span class="keyword">not</span> hasattr(req.request, <span class="string">"slot_info"</span>)) <span class="keyword">or</span> (<span class="keyword">not</span> hasattr(req.request.slot_info, <span class="string">"intent_name"</span>))):</div><div class="line">            <span class="keyword">return</span> outputJson(<span class="string">"抱歉，我还没有听懂。请先说明抽签人数或者直接对小爱说抽签。"</span>, <span class="keyword">False</span>, <span class="keyword">None</span>)</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">if</span> req.request.slot_info.intent_name == <span class="string">'random_sum'</span>:</div><div class="line">                slotsList = req.request.slot_info.slots</div><div class="line">                sum_person = [item <span class="keyword">for</span> item <span class="keyword">in</span> slotsList <span class="keyword">if</span> item[<span class="string">'name'</span>] == <span class="string">'random_sum'</span>][<span class="number">0</span>][<span class="string">'value'</span>]</div><div class="line">                <span class="keyword">if</span> int(sum_person) &gt; <span class="number">200</span>:</div><div class="line">                    sum_person = <span class="number">200</span></div><div class="line">                <span class="keyword">elif</span> int(sum_person) &lt; <span class="number">1</span>:</div><div class="line">                    sum_person = <span class="number">1</span></div><div class="line">                attribute[<span class="string">"sum_person"</span>] = int(sum_person)</div><div class="line">                attribute[<span class="string">"selected_num"</span>] = int(selected_num)</div><div class="line">                attribute[<span class="string">'dictionary'</span>] = dictionary</div><div class="line">                <span class="keyword">return</span> outputJson(<span class="string">"已设置参与人数"</span> + str(sum_person) + <span class="string">"人，请大家依次对小爱说 抽签 抽取自己的签号"</span>, <span class="keyword">False</span>,attribute)</div><div class="line">            <span class="keyword">elif</span> req.request.slot_info.intent_name == <span class="string">'random_select'</span>:</div><div class="line">                <span class="keyword">if</span> hasattr(req.session, <span class="string">"attributes"</span>):</div><div class="line">                    sum_person = int(req.session.attributes[<span class="string">"sum_person"</span>])</div><div class="line">                    selected_num = int(req.session.attributes[<span class="string">"selected_num"</span>])</div><div class="line">                    dictionary = req.session.attributes[<span class="string">"dictionary"</span>]</div><div class="line">                    attribute[<span class="string">"sum_person"</span>] = int(sum_person)</div><div class="line"></div><div class="line">                <span class="keyword">if</span> selected_num == sum_person:</div><div class="line">                    attribute[<span class="string">'dictionary'</span>] = dictionary</div><div class="line">                    attribute[<span class="string">"sum_person"</span>] = selected_num</div><div class="line">                    attribute[<span class="string">"selected_num"</span>] = selected_num</div><div class="line">                    <span class="keyword">return</span> outputJson(<span class="string">"签号都被抽完了，您可以向小爱说 所有人 来查看抽签信息或者重新设置人数哦"</span>, <span class="keyword">False</span>,attribute)</div><div class="line">                <span class="keyword">else</span>:</div><div class="line">                    rand = random.randint(<span class="number">1</span>,sum_person)</div><div class="line">                    print(<span class="string">"dictionary: "</span>+ str(dictionary))</div><div class="line">                    <span class="comment">#略</span></div><div class="line">                    dictionary.setdefault(str(rand),<span class="number">1</span>)</div><div class="line">                attribute[<span class="string">'dictionary'</span>] = dictionary</div><div class="line">                attribute[<span class="string">"selected_num"</span>] = int(selected_num+<span class="number">1</span>)</div><div class="line">                <span class="comment">#selected_num = selected_num+1</span></div><div class="line">                <span class="keyword">return</span> outputJson(<span class="string">"签号："</span>+str(rand)+<span class="string">"，还剩"</span>+str(sum_person-selected_num<span class="number">-1</span>)+<span class="string">"个签位"</span>, <span class="keyword">False</span>, attribute) </div><div class="line">            <span class="keyword">elif</span> req.request.slot_info.intent_name == <span class="string">'all_selected_info'</span>:</div><div class="line">                <span class="keyword">if</span> hasattr(req.session, <span class="string">"attributes"</span>):</div><div class="line">                    sum_person = int(req.session.attributes[<span class="string">"sum_person"</span>])</div><div class="line">                    selected_num = int(req.session.attributes[<span class="string">"selected_num"</span>])</div><div class="line">                    dictionary = req.session.attributes[<span class="string">"dictionary"</span>]</div><div class="line">                    attribute = req.session.attributes</div><div class="line">                </div><div class="line">                str_output = <span class="string">"已经选择的签号依次为："</span></div><div class="line">                j = <span class="number">1</span></div><div class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> dictionary.keys():</div><div class="line">                    str_output += str(j)+<span class="string">"号签:"</span>+ str(i) +<span class="string">", "</span></div><div class="line">                    j+=<span class="number">1</span></div><div class="line">                str_output +=<span class="string">"还剩"</span>+ str(sum_person-selected_num)+<span class="string">"个签位未选择。"</span></div><div class="line">                print(str_output)</div><div class="line">                <span class="keyword">return</span> outputJson(str_output, <span class="keyword">False</span>, attribute)</div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                <span class="keyword">return</span> outputJson(<span class="string">"抱歉，我没有听懂呢"</span>, <span class="keyword">False</span>,<span class="keyword">None</span>)</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">return</span> outputJson(<span class="string">"感谢使用抽签小工具，下次再见哦~"</span>, <span class="keyword">True</span>, <span class="keyword">None</span>, <span class="keyword">False</span>)</div></pre></td></tr></table></figure></p>
<p>直接看代码吧，可以根据中文看出分发的流程，<code>intent_name</code>就是上文表格的意图名称，接下来的逻辑并不是很复杂，这里对应用场景做了一些限制，如最大（默认）抽签人数为200人，可以直接跳过设置人数这个环节，这些都是为了减少用户不必要的往复交互。</p>
<p>由于每一次请求都是独立的，所以抽签人数和抽签结果的储存是必须要考虑的。这里采用了小米的开放云，所以平台也限制了一些其他的实现方案，在请教了小爱工程师之后采用小爱<code>request</code>中自带的<code>session</code>字段保存信息，由于数据量不大所以不会形成太重数据传输压力，<code>python</code>的小爱包是不开源的，可以到<a href="https://xiaoai.mi.com/documents/Home?type=/api/doc/render_markdown/SkillAccess/SkillDocument/CustomSkills/CustomSkillsMain" target="_blank" rel="external">这个链接</a>查看字段定义，刚开始都不知道<code>JSON</code>该怎么传输，后来发现只要用默认的<code>dictionary</code>就可以了。</p>
]]></content>
      
        <categories>
            
            <category> 2018-06 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> android </tag>
            
            <tag> 小爱同学 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ConcurrentHashmap拾遗]]></title>
      <url>http://wenjiehe.com/2018/06/11/ConcurrentHashmap/</url>
      <content type="html"><![CDATA[<h3 id="为什么Hashtable-ConcurrentHashmap不支持key或者value为null？"><a href="#为什么Hashtable-ConcurrentHashmap不支持key或者value为null？" class="headerlink" title="为什么Hashtable ConcurrentHashmap不支持key或者value为null？"></a>为什么Hashtable ConcurrentHashmap不支持key或者value为null？</h3><p>在很多java资料中，都有提到 ConcurrentHashmap HashMap和Hashtable都是key-value存储结构，但他们有一个不同点是 ConcurrentHashmap、Hashtable不支持key或者value为null，而HashMap是支持的。为什么会有这个区别？在设计上的目的是什么？</p>
<a id="more"></a>在网上找到了这样的解答:The main reason that nulls aren’t allowed in ConcurrentMaps (ConcurrentHashMaps, ConcurrentSkipListMaps) is that ambiguities that may be just barely tolerable in non-concurrent maps can’t be accommodated. The main one is that if map.get(key) returns null, you can’t detect whether the key explicitly maps to null vs the key isn’t mapped. In a non-concurrent map, you can check this via map.contains(key), but in a concurrent one, the map might have changed between calls.<br><br>理解如下：ConcurrentHashmap和Hashtable都是支持并发的，这样会有一个问题，当你通过get(k)获取对应的value时，如果获取到的是null时，你无法判断，它是put（k,v）的时候value为null，还是这个key从来没有做过映射（map）。HashMap是非并发的，可以通过contains(key)来做这个判断。而支持并发的Map在调用m.contains（key）和m.get(key),m可能已经不同了。<br><br>个人觉得这个解答还是很有道理的，也是解决了心头的一个疑惑，大牛们在设计时确实考虑的很多，在这里分享给大家。<br><br>类似的解答还有这个：<br>down vote<br>I believe it is, at least in part, to allow you to combine containsKey and get into a single call. If the map can hold nulls, there is no way to tell if get is returning a null because there was no key for that value, or just because the value was null.<br><br>Why is that a problem? Because there is no safe way to do that yourself. Take the following code:<br><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (m.containsKey(k)) &#123;</div><div class="line">   <span class="keyword">return</span> m.get(k);</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">   <span class="keyword">throw</span> <span class="keyword">new</span> KeyNotPresentException();</div><div class="line">&#125;<span class="number">12345</span></div></pre></td></tr></table></figure>
<p>Since m is a concurrent map, key k may be deleted between the containsKey and get calls, causing this snippet to return a null that was never in the table, rather than the desired KeyNotPresentException.</p>
<p>Normally you would solve that by synchronizing, but with a concurrent map that of course won’t work. Hence the signature for get had to change, and the only way to do that in a backwards-compatible way was to prevent the user inserting null values in the first place, and continue using that as a placeholder for “key not found”.</p>
<p><a href="http://stackoverflow.com/questions/698638/why-does-concurrenthashmap-prevent-null-keys-and-values%20%E5%8F%82%E8%80%83%E5%9C%B0%E5%9D%80" target="_blank" rel="external">参考地址</a></p>
<p>其他辅助性（佐证性质）的理由见下文。（对于ConcurrentHashmap，我参考其他人的相关文章，觉得还有其他理由。）</p>
<hr>
<h3 id="ConcurrentHashmap中get方法为何不需要加锁同步"><a href="#ConcurrentHashmap中get方法为何不需要加锁同步" class="headerlink" title="ConcurrentHashmap中get方法为何不需要加锁同步"></a>ConcurrentHashmap中get方法为何不需要加锁同步</h3><p>对于1.6，我们知道ConcurrentHashmap的get方法是没有加锁的，<strong>所以value不能为null刚好用上</strong>：newEntry对象是通过 <code>new HashEntry(K k , V v, HashEntry next)</code> 来创建的。如果另一个线程刚好new 这个对象时，当前线程来get它。因为没有同步，就可能会出现当前线程得到的newEntry对象是一个没有完全构造好的对象引用。</p>
<p>回想一下我们之前讨论的<strong>DCL</strong>的问题，这里也一样，没有锁同步的话，new 一个对象对于多线程看到这个对象的状态是没有保障的，这里同样有可能一个线程new这个对象的时候还没有执行完构造函数就被另一个线程得到这个对象引用。<br>所以才需要判断一下：<code>if (v != null)</code> 如果确实是一个不完整的对象，则使用锁的方式再次get一次。（来自参考文章1）</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function">V <span class="title">get</span><span class="params">(Object key, <span class="keyword">int</span> hash)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (count != <span class="number">0</span>) &#123; <span class="comment">// read-volatile // ①</span></div><div class="line">            HashEntry&lt;K,V&gt; e = getFirst(hash); </div><div class="line">            <span class="keyword">while</span> (e != <span class="keyword">null</span>) &#123;</div><div class="line">                <span class="keyword">if</span> (e.hash == hash &amp;&amp; key.equals(e.key)) &#123;</div><div class="line">                    V v = e.value;</div><div class="line">                    <span class="keyword">if</span> (v != <span class="keyword">null</span>)  <span class="comment">// ② 注意这里</span></div><div class="line">                        <span class="keyword">return</span> v;</div><div class="line">                    <span class="keyword">return</span> readValueUnderLock(e); <span class="comment">// recheck 见参考文章2</span></div><div class="line">                &#125;</div><div class="line">                e = e.next;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>对于1.7，应该是通过UNSAFE.putOrderedObject（保证刚刚插入表头的节点被读取）来保证；对于1.8，采用CAS和synchronized保证并发一致，但似乎没有做对正在put数据的二次获取，未仔细研究，以上见参考文章3。</p>
<p>参考文章</p>
<p><a href="http://www.cnblogs.com/yydcdut/p/3959815.html" target="_blank" rel="external">http://www.cnblogs.com/yydcdut/p/3959815.html</a></p>
<p><a href="https://segmentfault.com/q/1010000006669618" target="_blank" rel="external">https://segmentfault.com/q/1010000006669618</a></p>
<p><a href="https://www.javadoop.com/post/hashmap#Java7%20ConcurrentHashMap" target="_blank" rel="external">https://www.javadoop.com/post/hashmap#Java7%20ConcurrentHashMap</a></p>
]]></content>
      
        <categories>
            
            <category> 2018-06 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
            <tag> 集合 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Volley理解]]></title>
      <url>http://wenjiehe.com/2018/05/07/Volley/</url>
      <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p><strong>物理质量</strong></p>
<ul>
<li>使用Volley 需要Volley.jar(120k)，加上自己的封装最多140k。</li>
<li>使用OkHttp需要 okio.jar (80k), okhttp.jar(330k)这2个jar包，总大小差不多400k,加上自己的封装，差不多得410k。</li>
</ul>
<p><strong>Volley 的优点</strong></p>
<ul>
<li>非常适合进行数据量不大，但通信频繁的网络操作</li>
<li>可直接在主线程调用服务端并处理返回结果</li>
<li>可以取消请求，容易扩展，面向接口编程<a id="more"></a></li>
<li>网络请求线程NetworkDispatcher默认开启了4个，可以优化，通过手机CPU数量</li>
<li>通过使用标准的HTTP缓存机制保持磁盘和内存响应的一致</li>
</ul>
<p><strong>Volley 的缺点</strong></p>
<ul>
<li>使用的是httpclient、HttpURLConnection</li>
<li>6.0不支持httpclient了，如果想支持得添加org.apache.http.legacy.jar</li>
<li>对大文件下载 Volley的表现非常糟糕</li>
<li>只支持http请求</li>
<li>图片加载性能一般</li>
</ul>
<p><img src="/images/android/volley/Volley-architecture.png" alt=""></p>
<p>对于这张图我们只需要知道：</p>
<ul>
<li>Volley 运行的过程中一共有三种线程，包括 UI 线程、Cache 调度线程和 NetWork 调度线程池</li>
<li>请求加入优先级队列，Cache 线程进行筛选，如果命中（hit）分发给 UI 线程</li>
<li>未命中（miss）交给 NetWork 调度线程池处理，取回后更新 Cache 并分发给 UI 线程</li>
<li>每次请求执行过程始于 UI 线程， 终于 UI 线程</li>
</ul>
<p><img src="/images/android/volley/Volley.png" alt=""></p>
<p>RequestQueue封装了众多重要参数，重点有缓存队列，网络请求队列，cache，network，缓存调度，网络调度数组。</p>
<p>流程全部在图中。</p>
<ul>
<li>当一个RequestQueue被成功申请后会开启一个CacheDispatcher和4个默认的NetworkDispatcher。</li>
<li>CacheDispatcher缓存调度器最为第一层缓冲，开始工作后阻塞的从缓存序列mCacheQueue中取得请求；对于已经取消的请求，标记为跳过并结束这个请求；新的或者过期的请求，直接放入mNetworkQueue中由N个NetworkDispatcher进行处理；已获得缓存信息（网络应答）却没有过期的请求，由Request的parseNetworkResponse进行解析，从而确定此应答是否成功。然后将请求和应答交由Delivery分发者进行处理，如果需要更新缓存那么该请求还会被放入mNetworkQueue中。</li>
<li>将请求Request add到RequestQueue后对于不需要缓存的请求（需要额外设置，默认是需要缓存）直接丢入mNetworkQueue交给N个NetworkDispatcher处理；对于需要缓存的，新的请求加到mCacheQueue中给CacheDispatcher处理；需要缓存，但是缓存列表中已经存在了相同URL的请求，放在mWaitingQueue中做暂时处理，等待之前请求完毕后，再重新添加到mCacheQueue中。</li>
<li>网络请求调度器NetworkDispatcher作为网络请求真实发生的地方，对消息交给BasicNetwork进行处理，同样的，请求和结果都交由Delivery分发者进行处理。</li>
<li>Delivery分发者实际上已经是对网络请求处理的最后一层了，在Delivery对请求处理之前，Request已经对网络应答进行过解析，此时应答成功与否已经设定；而后Delivery根据请求所获得的应答情况做不同处理；若应答成功，则触发deliverResponse方法，最终会触发开发者为Request设定的Listener；若应答失败，则触发deliverError方法，最终会触发开发者为Request设定的ErrorListener；处理完后，一个Request的生命周期就结束了，Delivery会调用Request的finish操作，将其从mRequestQueue中移除，与此同时，如果等待列表中存在相同URL的请求，则会将剩余的层级请求全部丢入mCacheQueue交由CacheDispatcher进行处理。</li>
</ul>
<h3 id="缓存类"><a href="#缓存类" class="headerlink" title="缓存类"></a>缓存类</h3><p>Volley的缓存，主要是通过DiskBasedCache实现的。DiskBasedCache类，继承于Cache接口。DiskBasedCache保存CacheHeader，具体的数据并不会全部缓存到内存中（只有一个CacheHeader）。</p>
<p>在初始化时，会先把存在的cache（CacheHeader）保存进mEntries。</p>
<p>可以从get方法看出，先从mEntries找到CacheHeader，再去读文件，根据entry.toCacheEntry(data);构建出Entry类对象。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DiskBasedCache</span> <span class="keyword">implements</span> <span class="title">Cache</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">/** Map of the Key, CacheHeader pairs */</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, CacheHeader&gt; mEntries =</div><div class="line">            <span class="keyword">new</span> LinkedHashMap&lt;String, CacheHeader&gt;(<span class="number">16</span>, .<span class="number">75f</span>, <span class="keyword">true</span>);</div><div class="line"></div><div class="line">    <span class="comment">/** Total amount of space currently used by the cache in bytes. */</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">long</span> mTotalSize = <span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="comment">/** The root directory to use for the cache. */</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> File mRootDirectory;</div><div class="line"></div><div class="line">    <span class="comment">/** The maximum size of the cache in bytes. */</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> mMaxCacheSizeInBytes;</div><div class="line">    </div><div class="line">    ......</div><div class="line">        </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">initialize</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">//初始化，会读取缓存目录下的文件，全部放入mEntries中</span></div><div class="line">        ...</div><div class="line">        File[] files = mRootDirectory.listFiles();</div><div class="line">        ...</div><div class="line">        <span class="keyword">for</span> (File file : files) &#123;</div><div class="line">            BufferedInputStream fis = <span class="keyword">null</span>;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                fis = <span class="keyword">new</span> BufferedInputStream(<span class="keyword">new</span> FileInputStream(file));</div><div class="line">                CacheHeader entry = CacheHeader.readHeader(fis);</div><div class="line">                entry.size = file.length();</div><div class="line">                putEntry(entry.key, entry);<span class="comment">//重点</span></div><div class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">                ...</div><div class="line">            &#125; <span class="keyword">finally</span> &#123;</div><div class="line">                ...</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> Entry <span class="title">get</span><span class="params">(String key)</span> </span>&#123;</div><div class="line">        CacheHeader entry = mEntries.get(key);</div><div class="line">        <span class="comment">// if the entry does not exist, return.</span></div><div class="line">        <span class="keyword">if</span> (entry == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        File file = getFileForKey(key);</div><div class="line">        CountingInputStream cis = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            cis = <span class="keyword">new</span> CountingInputStream(<span class="keyword">new</span> FileInputStream(file));</div><div class="line">            CacheHeader.readHeader(cis); <span class="comment">// eat header  //先读header</span></div><div class="line">            <span class="keyword">byte</span>[] data = streamToBytes(cis, (<span class="keyword">int</span>) (file.length() - cis.bytesRead));</div><div class="line">            <span class="keyword">return</span> entry.toCacheEntry(data);<span class="comment">//重点</span></div><div class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">            ...</div><div class="line">        &#125; <span class="keyword">finally</span> &#123;</div><div class="line">            ...</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">        </div><div class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">CacheHeader</span></span>&#123;见下代码&#125;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">CountingInputStream</span> <span class="keyword">extends</span> <span class="title">FilterInputStream</span> </span>&#123;...&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//DiskBasedCache内部类，提出来分析 注意没有data信息</span></div><div class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">CacheHeader</span> </span>&#123;</div><div class="line">        <span class="comment">/** The size of the data identified by this CacheHeader. (This is not</span></div><div class="line">         * serialized to disk. */</div><div class="line">        <span class="keyword">public</span> <span class="keyword">long</span> size;</div><div class="line"></div><div class="line">        <span class="comment">/** The key that identifies the cache entry. */</span></div><div class="line">        <span class="keyword">public</span> String key;</div><div class="line"></div><div class="line">        <span class="comment">/** ETag for cache coherence. */</span></div><div class="line">        <span class="keyword">public</span> String etag;</div><div class="line"></div><div class="line">        <span class="comment">/** Date of this response as reported by the server. */</span></div><div class="line">        <span class="keyword">public</span> <span class="keyword">long</span> serverDate;</div><div class="line"></div><div class="line">        <span class="comment">/** The last modified date for the requested object. */</span></div><div class="line">        <span class="keyword">public</span> <span class="keyword">long</span> lastModified;</div><div class="line"></div><div class="line">        <span class="comment">/** TTL for this record. */</span></div><div class="line">        <span class="keyword">public</span> <span class="keyword">long</span> ttl;</div><div class="line"></div><div class="line">        <span class="comment">/** Soft TTL for this record. */</span></div><div class="line">        <span class="keyword">public</span> <span class="keyword">long</span> softTtl;</div><div class="line"></div><div class="line">        <span class="comment">/** Headers from the response resulting in this cache entry. */</span></div><div class="line">        <span class="keyword">public</span> Map&lt;String, String&gt; responseHeaders;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">private</span> <span class="title">CacheHeader</span><span class="params">()</span> </span>&#123; &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">CacheHeader</span><span class="params">(String key, Entry entry)</span> </span>&#123;</div><div class="line">            <span class="keyword">this</span>.key = key;</div><div class="line">            <span class="keyword">this</span>.size = entry.data.length;</div><div class="line">            <span class="keyword">this</span>.etag = entry.etag;</div><div class="line">            <span class="keyword">this</span>.serverDate = entry.serverDate;</div><div class="line">            <span class="keyword">this</span>.lastModified = entry.lastModified;</div><div class="line">            <span class="keyword">this</span>.ttl = entry.ttl;</div><div class="line">            <span class="keyword">this</span>.softTtl = entry.softTtl;</div><div class="line">            <span class="keyword">this</span>.responseHeaders = entry.responseHeaders;</div><div class="line">        &#125;</div><div class="line">    </div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> CacheHeader <span class="title">readHeader</span><span class="params">(InputStream is)</span> <span class="keyword">throws</span> IOException</span>&#123;...&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">writeHeader</span><span class="params">(OutputStream os)</span></span>&#123;...&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> Entry <span class="title">toCacheEntry</span><span class="params">(<span class="keyword">byte</span>[] data)</span></span>&#123;</div><div class="line">            Entry e = <span class="keyword">new</span> Entry();</div><div class="line">            e.data = data;</div><div class="line">            e.etag = etag;</div><div class="line">            e.serverDate = serverDate;</div><div class="line">            e.lastModified = lastModified;</div><div class="line">            e.ttl = ttl;</div><div class="line">            e.softTtl = softTtl;</div><div class="line">            e.responseHeaders = responseHeaders;</div><div class="line">            <span class="keyword">return</span> e;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Cache接口及静态内部类Entry</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Cache</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> Entry <span class="title">get</span><span class="params">(String key)</span></span>;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(String key, Entry entry)</span></span>;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initialize</span><span class="params">()</span></span>;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">invalidate</span><span class="params">(String key, <span class="keyword">boolean</span> fullExpire)</span></span>;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(String key)</span></span>;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Entry</span> </span>&#123;</div><div class="line">        <span class="comment">/** The data returned from cache. */</span></div><div class="line">        <span class="keyword">public</span> <span class="keyword">byte</span>[] data;</div><div class="line"></div><div class="line">        <span class="comment">/** ETag for cache coherency. */</span></div><div class="line">        <span class="keyword">public</span> String etag;</div><div class="line"></div><div class="line">        <span class="comment">/** Date of this response as reported by the server. */</span></div><div class="line">        <span class="keyword">public</span> <span class="keyword">long</span> serverDate;</div><div class="line"></div><div class="line">        <span class="comment">/** The last modified date for the requested object. */</span></div><div class="line">        <span class="keyword">public</span> <span class="keyword">long</span> lastModified;</div><div class="line"></div><div class="line">        <span class="comment">/** TTL for this record. */</span></div><div class="line">        <span class="keyword">public</span> <span class="keyword">long</span> ttl;</div><div class="line"></div><div class="line">        <span class="comment">/** Soft TTL for this record. */</span></div><div class="line">        <span class="keyword">public</span> <span class="keyword">long</span> softTtl;</div><div class="line"></div><div class="line">        <span class="comment">/** Immutable response headers as received from server; must be non-null. */</span></div><div class="line">        <span class="keyword">public</span> Map&lt;String, String&gt; responseHeaders = Collections.emptyMap();</div><div class="line"></div><div class="line">        <span class="comment">/** True if the entry is expired. */</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isExpired</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.ttl &lt; System.currentTimeMillis();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">/** True if a refresh is needed from the original data source. */</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">refreshNeeded</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.softTtl &lt; System.currentTimeMillis();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>有人说Volley的缓存替换策略是FIFO的，不是LRU。我看了下源码，似乎不是这样（如果我弄错了，希望各位指正）</p>
<p>FIFO 说法来源  <a href="https://blog.csdn.net/wzy_1988/article/details/51540668" target="_blank" rel="external">Volley HTTP 缓存机制</a>    <a href="https://www.jianshu.com/p/358b766c8d27" target="_blank" rel="external">手撕 Volley（二）</a></p>
<p>DiskBasedCache中的相关属性方法</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, CacheHeader&gt; mEntries =</div><div class="line">            <span class="keyword">new</span> LinkedHashMap&lt;String, CacheHeader&gt;(<span class="number">16</span>, .<span class="number">75f</span>, <span class="keyword">true</span>);</div><div class="line"><span class="comment">//重点，这个true是设置成access order， false是insertion order</span></div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Puts the entry with the specified key into the cache.</div><div class="line"> */</div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(String key, Entry entry)</span> </span>&#123;</div><div class="line">    pruneIfNeeded(entry.data.length);</div><div class="line">    File file = getFileForKey(key);</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        BufferedOutputStream fos = <span class="keyword">new</span> BufferedOutputStream(<span class="keyword">new</span> FileOutputStream(file));</div><div class="line">        CacheHeader e = <span class="keyword">new</span> CacheHeader(key, entry);</div><div class="line">        <span class="keyword">boolean</span> success = e.writeHeader(fos);</div><div class="line">        <span class="keyword">if</span> (!success) &#123;</div><div class="line">            fos.close();</div><div class="line">            VolleyLog.d(<span class="string">"Failed to write header for %s"</span>, file.getAbsolutePath());</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IOException();</div><div class="line">        &#125;</div><div class="line">        fos.write(entry.data);</div><div class="line">        fos.close();</div><div class="line">        putEntry(key, e);</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">boolean</span> deleted = file.delete();</div><div class="line">    <span class="keyword">if</span> (!deleted) &#123;</div><div class="line">        VolleyLog.d(<span class="string">"Could not clean up file %s"</span>, file.getAbsolutePath());</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Prunes the cache to fit the amount of bytes specified.</div><div class="line">     * <span class="doctag">@param</span> neededSpace The amount of bytes we are trying to fit into the cache.</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">pruneIfNeeded</span><span class="params">(<span class="keyword">int</span> neededSpace)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> ((mTotalSize + neededSpace) &lt; mMaxCacheSizeInBytes) &#123;</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (VolleyLog.DEBUG) &#123;</div><div class="line">            VolleyLog.v(<span class="string">"Pruning old cache entries."</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">long</span> before = mTotalSize;</div><div class="line">        <span class="keyword">int</span> prunedFiles = <span class="number">0</span>;</div><div class="line">        <span class="keyword">long</span> startTime = SystemClock.elapsedRealtime();</div><div class="line"></div><div class="line">        Iterator&lt;Map.Entry&lt;String, CacheHeader&gt;&gt; iterator = mEntries.entrySet().iterator();</div><div class="line">        <span class="keyword">while</span> (iterator.hasNext()) &#123;</div><div class="line">            <span class="comment">//从头开始删除，linkedhashmap又是access order ,所以是LRU</span></div><div class="line">            Map.Entry&lt;String, CacheHeader&gt; entry = iterator.next();</div><div class="line">            CacheHeader e = entry.getValue();</div><div class="line">            <span class="keyword">boolean</span> deleted = getFileForKey(e.key).delete();</div><div class="line">            <span class="keyword">if</span> (deleted) &#123;</div><div class="line">                mTotalSize -= e.size;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">               VolleyLog.d(<span class="string">"Could not delete cache entry for key=%s, filename=%s"</span>,</div><div class="line">                       e.key, getFilenameForKey(e.key));</div><div class="line">            &#125;</div><div class="line">            iterator.remove();</div><div class="line">            prunedFiles++;</div><div class="line"></div><div class="line">            <span class="keyword">if</span> ((mTotalSize + neededSpace) &lt; mMaxCacheSizeInBytes * HYSTERESIS_FACTOR) &#123;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (VolleyLog.DEBUG) &#123;</div><div class="line">            VolleyLog.v(<span class="string">"pruned %d files, %d bytes, %d ms"</span>,</div><div class="line">                    prunedFiles, (mTotalSize - before), SystemClock.elapsedRealtime() - startTime);</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h3 id="缓存添加"><a href="#缓存添加" class="headerlink" title="缓存添加"></a>缓存添加</h3><p>缓存的添加逻辑在NetworkDispatcher.java中展开</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//NetworkDispatcher.java</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NetworkDispatcher</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</div><div class="line">    <span class="comment">/** The queue of requests to service. */</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> BlockingQueue&lt;Request&lt;?&gt;&gt; mQueue;</div><div class="line">    <span class="comment">/** The network interface for processing requests. */</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Network mNetwork;</div><div class="line">    <span class="comment">/** The cache to write to. */</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Cache mCache;</div><div class="line">    <span class="comment">/** For posting responses and errors. */</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ResponseDelivery mDelivery;</div><div class="line">    <span class="comment">/** Used for telling us to die. */</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">boolean</span> mQuit = <span class="keyword">false</span>;</div><div class="line">    </div><div class="line">    ...</div><div class="line">        </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">        Process.setThreadPriority(Process.THREAD_PRIORITY_BACKGROUND);</div><div class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</div><div class="line">            <span class="keyword">long</span> startTimeMs = SystemClock.elapsedRealtime();</div><div class="line">            Request&lt;?&gt; request;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                <span class="comment">// Take a request from the queue.</span></div><div class="line">                request = mQueue.take();</div><div class="line">            &#125; <span class="keyword">catch</span> ...</div><div class="line"></div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                request.addMarker(<span class="string">"network-queue-take"</span>);</div><div class="line"></div><div class="line">                <span class="comment">// If the request was cancelled already, do not perform the</span></div><div class="line">                <span class="comment">// network request.</span></div><div class="line">                <span class="keyword">if</span> (request.isCanceled()) &#123;</div><div class="line">                    request.finish(<span class="string">"network-discard-cancelled"</span>);</div><div class="line">                    <span class="keyword">continue</span>;</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                addTrafficStatsTag(request);</div><div class="line"></div><div class="line">                <span class="comment">// Perform the network request.</span></div><div class="line">                NetworkResponse networkResponse = mNetwork.performRequest(request);<span class="comment">//发起请求</span></div><div class="line">                request.addMarker(<span class="string">"network-http-complete"</span>);</div><div class="line"></div><div class="line">                <span class="comment">// If the server returned 304 AND we delivered a response already,</span></div><div class="line">                <span class="comment">// we're done -- don't deliver a second identical response.</span></div><div class="line">                <span class="keyword">if</span> (networkResponse.notModified &amp;&amp; request.hasHadResponseDelivered()) &#123;</div><div class="line">                    request.finish(<span class="string">"not-modified"</span>);</div><div class="line">                    <span class="keyword">continue</span>;</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                <span class="comment">// Parse the response here on the worker thread.</span></div><div class="line">                Response&lt;?&gt; response = request.parseNetworkResponse(networkResponse);<span class="comment">//转1 目的在于构建Cache.Entry</span></div><div class="line">                request.addMarker(<span class="string">"network-parse-complete"</span>);</div><div class="line"></div><div class="line">                <span class="comment">// Write to cache if applicable.</span></div><div class="line">                <span class="comment">// <span class="doctag">TODO:</span> Only update cache metadata instead of entire record for 304s.</span></div><div class="line">                <span class="keyword">if</span> (request.shouldCache() &amp;&amp; response.cacheEntry != <span class="keyword">null</span>) &#123;</div><div class="line">                    mCache.put(request.getCacheKey(), response.cacheEntry);<span class="comment">//放入mCache中（cacheHeader），同时保存在磁盘中（这个方法在上文FIFO/LRU讨论有提及）</span></div><div class="line">                    request.addMarker(<span class="string">"network-cache-written"</span>);</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                <span class="comment">// Post the response back.</span></div><div class="line">                request.markDelivered();</div><div class="line">                mDelivery.postResponse(request, response);</div><div class="line">            &#125; <span class="keyword">catch</span> ...</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//其他方法</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//Request.java</span></div><div class="line"><span class="comment">//接 转1</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Request</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">Comparable</span>&lt;<span class="title">Request</span>&lt;<span class="title">T</span>&gt;&gt; </span>&#123;</div><div class="line">    ...</div><div class="line"> 	<span class="comment">//在具体的Request类中实现，这里以JsonObjectRequest类为例，见下代码</span></div><div class="line">	<span class="function"><span class="keyword">abstract</span> <span class="keyword">protected</span> Response&lt;T&gt; <span class="title">parseNetworkResponse</span><span class="params">(NetworkResponse response)</span></span>;</div><div class="line">    ...</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//JsonObjectRequest.java 以JsonObjectRequest的实现为例</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JsonObjectRequest</span> <span class="keyword">extends</span> <span class="title">JsonRequest</span>&lt;<span class="title">JSONObject</span>&gt; </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">JsonObjectRequest</span><span class="params">(<span class="keyword">int</span> method, String url, JSONObject jsonRequest,</span></span></div><div class="line">            Listener&lt;JSONObject&gt; listener, ErrorListener errorListener) &#123;</div><div class="line">        <span class="keyword">super</span>(method, url, (jsonRequest == <span class="keyword">null</span>) ? <span class="keyword">null</span> : jsonRequest.toString(), listener,</div><div class="line">                    errorListener);</div><div class="line">    &#125;</div><div class="line">    ...</div><div class="line">    <span class="comment">//实现抽象方法</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> Response&lt;JSONObject&gt; <span class="title">parseNetworkResponse</span><span class="params">(NetworkResponse response)</span> </span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            String jsonString = <span class="keyword">new</span> String(response.data,</div><div class="line">                    HttpHeaderParser.parseCharset(response.headers, PROTOCOL_CHARSET));</div><div class="line">            <span class="comment">// HttpHeaderParser.parseCacheHeaders() -&gt; 完成response的header解析,构建成Cache.Entry（这是有数据的）</span></div><div class="line">            <span class="comment">// Response.success() -&gt; new Response&lt;T&gt;(T result, Cache.Entry cacheEntry); </span></div><div class="line">            <span class="keyword">return</span> Response.success(<span class="keyword">new</span> JSONObject(jsonString),</div><div class="line">                    HttpHeaderParser.parseCacheHeaders(response));<span class="comment">//静态方法</span></div><div class="line">        &#125; <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123;</div><div class="line">            <span class="keyword">return</span> Response.error(<span class="keyword">new</span> ParseError(e));</div><div class="line">        &#125; <span class="keyword">catch</span> (JSONException je) &#123;</div><div class="line">            <span class="keyword">return</span> Response.error(<span class="keyword">new</span> ParseError(je));</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//HttpHeaderParser.java</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpHeaderParser</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Cache.<span class="function">Entry <span class="title">parseCacheHeaders</span><span class="params">(NetworkResponse response)</span> </span>&#123;</div><div class="line">        <span class="keyword">long</span> now = System.currentTimeMillis();</div><div class="line"></div><div class="line">        Map&lt;String, String&gt; headers = response.headers;</div><div class="line"></div><div class="line">        <span class="keyword">long</span> serverDate = <span class="number">0</span>;</div><div class="line">        <span class="keyword">long</span> lastModified = <span class="number">0</span>;</div><div class="line">        <span class="keyword">long</span> serverExpires = <span class="number">0</span>;</div><div class="line">        <span class="keyword">long</span> softExpire = <span class="number">0</span>;</div><div class="line">        <span class="keyword">long</span> finalExpire = <span class="number">0</span>;</div><div class="line">        <span class="keyword">long</span> maxAge = <span class="number">0</span>;</div><div class="line">        <span class="keyword">long</span> staleWhileRevalidate = <span class="number">0</span>;</div><div class="line">        <span class="keyword">boolean</span> hasCacheControl = <span class="keyword">false</span>;</div><div class="line">        <span class="keyword">boolean</span> mustRevalidate = <span class="keyword">false</span>;</div><div class="line"></div><div class="line">        String serverEtag = <span class="keyword">null</span>;</div><div class="line">        String headerValue;</div><div class="line"></div><div class="line">        headerValue = headers.get(<span class="string">"Date"</span>);</div><div class="line">        <span class="keyword">if</span> (headerValue != <span class="keyword">null</span>) &#123;</div><div class="line">            serverDate = parseDateAsEpoch(headerValue);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        headerValue = headers.get(<span class="string">"Cache-Control"</span>);</div><div class="line">        <span class="keyword">if</span> (headerValue != <span class="keyword">null</span>) &#123;</div><div class="line">            hasCacheControl = <span class="keyword">true</span>;</div><div class="line">            String[] tokens = headerValue.split(<span class="string">","</span>);</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tokens.length; i++) &#123;</div><div class="line">                String token = tokens[i].trim();</div><div class="line">                <span class="keyword">if</span> (token.equals(<span class="string">"no-cache"</span>) || token.equals(<span class="string">"no-store"</span>)) &#123;</div><div class="line">                    <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (token.startsWith(<span class="string">"max-age="</span>)) &#123;</div><div class="line">                    <span class="keyword">try</span> &#123;</div><div class="line">                        maxAge = Long.parseLong(token.substring(<span class="number">8</span>));</div><div class="line">                    &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">                    &#125;</div><div class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (token.startsWith(<span class="string">"stale-while-revalidate="</span>)) &#123;</div><div class="line">                    <span class="keyword">try</span> &#123;</div><div class="line">                        staleWhileRevalidate = Long.parseLong(token.substring(<span class="number">23</span>));</div><div class="line">                    &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">                    &#125;</div><div class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (token.equals(<span class="string">"must-revalidate"</span>) || token.equals(<span class="string">"proxy-revalidate"</span>)) &#123;</div><div class="line">                    mustRevalidate = <span class="keyword">true</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        headerValue = headers.get(<span class="string">"Expires"</span>);</div><div class="line">        <span class="keyword">if</span> (headerValue != <span class="keyword">null</span>) &#123;</div><div class="line">            serverExpires = parseDateAsEpoch(headerValue);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        headerValue = headers.get(<span class="string">"Last-Modified"</span>);</div><div class="line">        <span class="keyword">if</span> (headerValue != <span class="keyword">null</span>) &#123;</div><div class="line">            lastModified = parseDateAsEpoch(headerValue);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        serverEtag = headers.get(<span class="string">"ETag"</span>);</div><div class="line"></div><div class="line">        <span class="comment">// Cache-Control takes precedence over an Expires header, even if both exist and Expires</span></div><div class="line">        <span class="comment">// is more restrictive.</span></div><div class="line">        <span class="keyword">if</span> (hasCacheControl) &#123;</div><div class="line">            softExpire = now + maxAge * <span class="number">1000</span>;</div><div class="line">            finalExpire = mustRevalidate</div><div class="line">                    ? softExpire</div><div class="line">                    : softExpire + staleWhileRevalidate * <span class="number">1000</span>;</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (serverDate &gt; <span class="number">0</span> &amp;&amp; serverExpires &gt;= serverDate) &#123;</div><div class="line">            <span class="comment">// Default semantic for Expire header in HTTP specification is softExpire.</span></div><div class="line">            softExpire = now + (serverExpires - serverDate);</div><div class="line">            finalExpire = softExpire;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        Cache.Entry entry = <span class="keyword">new</span> Cache.Entry();</div><div class="line">        entry.data = response.data;</div><div class="line">        entry.etag = serverEtag;</div><div class="line">        entry.softTtl = softExpire;</div><div class="line">        entry.ttl = finalExpire;</div><div class="line">        entry.serverDate = serverDate;</div><div class="line">        entry.lastModified = lastModified;</div><div class="line">        entry.responseHeaders = headers;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> entry;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">	...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Volley对于图片加载做了内存缓存的处理(ImageLoader)，详情见<a href="https://blog.csdn.net/wzy_1988/article/details/51005389" target="_blank" rel="external">Volley图片加载功能</a></p>
<h3 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h3><h4 id="softTtl和ttl"><a href="#softTtl和ttl" class="headerlink" title="softTtl和ttl"></a>softTtl和ttl</h4><p>看上面的代码就知道它们的计算略有不同，stale-while-revalidate这个cache字段是RFC-5861增加的。</p>
<p>对应两个函数refreshNeeded()和isExpired()并不完全相同，分别比较softTtl和ttl值。这可以用于实现从缓存请求的语义，对于softTtl，你将返回一个响应即使是“软”到期,但是会去网络和刷新，如果数据已经改变了返回一个新的响应。</p>
<p>看一下CacheDispatcher类。这里先看ttl有没有过期，过期直接走网络请求响应；没有过期看softTtl，softTtl也没用过期那就完全没过期，过期了也没事，两步走，先返回响应，再去网络请求下，这时候发现过期会再刷新（对这次请求似乎没有影响？未求证），<a href="https://groups.google.com/forum/#!topic/volley-users/70CVZdsLX0w" target="_blank" rel="external">一般不建议使用</a>。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CacheDispatcher</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</div><div class="line">	...</div><div class="line">	</div><div class="line">	<span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (DEBUG) VolleyLog.v(<span class="string">"start new dispatcher"</span>);</div><div class="line">        Process.setThreadPriority(Process.THREAD_PRIORITY_BACKGROUND);</div><div class="line"></div><div class="line">        <span class="comment">// Make a blocking call to initialize the cache.</span></div><div class="line">        mCache.initialize();</div><div class="line"></div><div class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                <span class="comment">// Get a request from the cache triage queue, blocking until</span></div><div class="line">                <span class="comment">// at least one is available.</span></div><div class="line">                <span class="keyword">final</span> Request&lt;?&gt; request = mCacheQueue.take();</div><div class="line">                request.addMarker(<span class="string">"cache-queue-take"</span>);</div><div class="line"></div><div class="line">                <span class="comment">// If the request has been canceled, don't bother dispatching it.</span></div><div class="line">                <span class="keyword">if</span> (request.isCanceled()) &#123;</div><div class="line">                    request.finish(<span class="string">"cache-discard-canceled"</span>);</div><div class="line">                    <span class="keyword">continue</span>;</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                <span class="comment">// Attempt to retrieve this item from cache.</span></div><div class="line">                Cache.Entry entry = mCache.get(request.getCacheKey());</div><div class="line">                <span class="keyword">if</span> (entry == <span class="keyword">null</span>) &#123;</div><div class="line">                    request.addMarker(<span class="string">"cache-miss"</span>);</div><div class="line">                    <span class="comment">// Cache miss; send off to the network dispatcher.</span></div><div class="line">                    mNetworkQueue.put(request);</div><div class="line">                    <span class="keyword">continue</span>;</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                <span class="comment">// If it is completely expired, just send it to the network.</span></div><div class="line">                <span class="keyword">if</span> (entry.isExpired()) &#123;</div><div class="line">                    <span class="comment">// ttl过期，彻底过期，直接走网络</span></div><div class="line">                    request.addMarker(<span class="string">"cache-hit-expired"</span>);</div><div class="line">                    request.setCacheEntry(entry);</div><div class="line">                    mNetworkQueue.put(request);</div><div class="line">                    <span class="keyword">continue</span>;</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                <span class="comment">// We have a cache hit; parse its data for delivery back to the request.</span></div><div class="line">                request.addMarker(<span class="string">"cache-hit"</span>);</div><div class="line">                Response&lt;?&gt; response = request.parseNetworkResponse(</div><div class="line">                        <span class="keyword">new</span> NetworkResponse(entry.data, entry.responseHeaders));</div><div class="line">                request.addMarker(<span class="string">"cache-hit-parsed"</span>);</div><div class="line"></div><div class="line">                <span class="keyword">if</span> (!entry.refreshNeeded()) &#123;</div><div class="line">                    <span class="comment">// Completely unexpired cache hit. Just deliver the response.</span></div><div class="line">                    <span class="comment">// 完全没过期</span></div><div class="line">                    mDelivery.postResponse(request, response);</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    <span class="comment">// Soft-expired cache hit. We can deliver the cached response,</span></div><div class="line">                    <span class="comment">// but we need to also send the request to the network for</span></div><div class="line">                    <span class="comment">// refreshing.</span></div><div class="line">                    <span class="comment">// softTtl过期，先返回请求；再去网络请求</span></div><div class="line">                    request.addMarker(<span class="string">"cache-hit-refresh-needed"</span>);</div><div class="line">                    request.setCacheEntry(entry);</div><div class="line"></div><div class="line">                    <span class="comment">// Mark the response as intermediate.</span></div><div class="line">                    response.intermediate = <span class="keyword">true</span>;</div><div class="line"></div><div class="line">                    <span class="comment">// Post the intermediate response back to the user and have</span></div><div class="line">                    <span class="comment">// the delivery then forward the request along to the network.</span></div><div class="line">                    mDelivery.postResponse(request, response, <span class="keyword">new</span> Runnable() &#123;</div><div class="line">                        <span class="meta">@Override</span></div><div class="line">                        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                            <span class="keyword">try</span> &#123;</div><div class="line">                                mNetworkQueue.put(request);</div><div class="line">                            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                                <span class="comment">// Not much we can do about this.</span></div><div class="line">                            &#125;</div><div class="line">                        &#125;</div><div class="line">                    &#125;);</div><div class="line">                &#125;</div><div class="line"></div><div class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                <span class="comment">// We may have been interrupted because it was time to quit.</span></div><div class="line">                <span class="keyword">if</span> (mQuit) &#123;</div><div class="line">                    <span class="keyword">return</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">continue</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="优秀的参考链接"><a href="#优秀的参考链接" class="headerlink" title="优秀的参考链接"></a>优秀的参考链接</h3><p><a href="https://www.jianshu.com/p/33be82da8f25" target="_blank" rel="external">手撕Volley（一、二、三）</a><br><a href="https://blog.csdn.net/wzy_1988/article/details/51540668" target="_blank" rel="external">Volley HTTP 缓存机制</a><br><a href="https://blog.csdn.net/wzy_1988/article/details/51005389" target="_blank" rel="external">Volley图片加载功能</a><br><a href="http://www.cnblogs.com/chenqf/p/6386163.html" target="_blank" rel="external">彻底弄懂HTTP缓存机制及原理</a><br><a href="https://www.cnblogs.com/vajoy/p/5341664.html" target="_blank" rel="external">浅谈浏览器http的缓存机制</a><br><a href="https://www.jianshu.com/p/e3a182bbe7f7" target="_blank" rel="external">Android史上最全面试题(持续更新ing)</a><br><a href="https://stackoverflow.com/questions/28523435/what-s-the-different-of-entry-softttl-and-entry-ttl-in-volley" target="_blank" rel="external">What‘s the different of entry.softTtl and entry.ttl in volley?</a></p>
]]></content>
      
        <categories>
            
            <category> 2018-05 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> android </tag>
            
            <tag> volley </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[【Android面试特辑】Android线程与线程池总结回顾]]></title>
      <url>http://wenjiehe.com/2018/03/22/android-thread-thradpool-structure/</url>
      <content type="html"><![CDATA[<p>总结一下Android中Thread和ThreadPool的内容，建议保存图片查看，欢迎补充。<a id="more"></a></p>
<img src="/images/android/Thread-ThreadPool-structure.png">
]]></content>
      
        <categories>
            
            <category> 2018-03 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> android </tag>
            
            <tag> Thread </tag>
            
            <tag> ThreadPool </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[【Android面试特辑】Handler总结回顾]]></title>
      <url>http://wenjiehe.com/2018/03/21/android-handler-structure/</url>
      <content type="html"><![CDATA[<p>总结一下Handler的内容，建议保存图片查看，欢迎补充。<a id="more"></a></p>
<img src="/images/android/Handler-structure.png">
]]></content>
      
        <categories>
            
            <category> 2018-03 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> android </tag>
            
            <tag> handler </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[【Android面试特辑】事件分发机制总结回顾]]></title>
      <url>http://wenjiehe.com/2018/03/20/android-dipatch-event-structure/</url>
      <content type="html"><![CDATA[<p>总结一下事件分发的内容，建议保存图片查看，欢迎补充。<a id="more"></a></p>
<img src="/images/android/Dispatch-event-structure.png">
]]></content>
      
        <categories>
            
            <category> 2018-03 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> android </tag>
            
            <tag> 事件分发 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[二进制中0的个数]]></title>
      <url>http://wenjiehe.com/2018/03/18/coding-interview-zero-number-of-second-session/</url>
      <content type="html"><![CDATA[<p>师兄的一道网易面试题<br>问题：求二进制0的个数，要求从第一位为1往后统计个数?</p>
<h4 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h4><p>主要考虑正负数情况。<a id="more"></a><br>对于正数，在不为0的情况下，计算其二进制，容易得0的个数。<br>对于负数，因为已知第一位是1的，所以不用担心有高位0，直接取1，然后依次左移，看&amp;原值是不是0。停止条件是这个数为0。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">numberOf0</span><span class="params">(<span class="keyword">int</span> num)</span></span>&#123;  </div><div class="line">    <span class="keyword">int</span> count=<span class="number">0</span>;  </div><div class="line">    <span class="keyword">if</span>(num&lt;<span class="number">0</span>)&#123;  </div><div class="line">        <span class="keyword">int</span> i=<span class="number">1</span>;  </div><div class="line">        <span class="keyword">while</span>(i!=<span class="number">0</span>)&#123;  </div><div class="line">            <span class="keyword">if</span>((i&amp;num)==<span class="number">0</span>)&#123;  </div><div class="line">                count++;  </div><div class="line">            &#125;  </div><div class="line">            i=i&lt;&lt;<span class="number">1</span>;  </div><div class="line">        &#125;  </div><div class="line">        <span class="keyword">return</span>  count;  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="keyword">while</span>(num!=<span class="number">0</span>)&#123;  </div><div class="line">        <span class="keyword">int</span> mod = num%<span class="number">2</span>;  </div><div class="line">        <span class="keyword">if</span>(mod==<span class="number">0</span>)  </div><div class="line">            count++;  </div><div class="line">        num = num/<span class="number">2</span>;  </div><div class="line">    &#125;  </div><div class="line">    <span class="keyword">return</span> count;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h4><p>另一种技巧性强的方法。从低位开始，遇到0则正常计数，遇到1则需要判断，在更高位是否还有1，没有则可以跳出循环。</p>
<p>判断方法在于：</p>
<p>先记录左移次数，在当前次数下的次（第二）大值，如左移3次，为0b1000，次大值为0b0111；</p>
<p>把原数当前为1的位变成0，再比较这个数和次大值，如果高位没有1，则这个数不会超过次大值，这时就可以跳出循环了，注意绝对值。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">NumberOf0</span><span class="params">(<span class="keyword">int</span> num)</span></span>&#123;  </div><div class="line">    <span class="keyword">int</span> count =<span class="number">0</span>;  </div><div class="line">  </div><div class="line">    <span class="keyword">int</span> flag0 = <span class="number">0</span>;  </div><div class="line">    <span class="keyword">int</span> flag1 = <span class="number">1</span>;  </div><div class="line">  </div><div class="line">    <span class="keyword">int</span> movecount =<span class="number">0</span>;  </div><div class="line">    <span class="keyword">int</span> max =<span class="number">0</span>;  </div><div class="line">  </div><div class="line">    <span class="keyword">for</span>(;;)&#123;  </div><div class="line">        <span class="keyword">if</span>((num&amp;flag1)==<span class="number">0</span>)&#123;  </div><div class="line">            count++;  </div><div class="line">        &#125;<span class="keyword">else</span>&#123;  </div><div class="line">            flag0 =~flag1;  </div><div class="line">            max = <span class="number">1</span>&lt;&lt;movecount;<span class="comment">//构造次大值  </span></div><div class="line">            max--;  </div><div class="line">            <span class="keyword">if</span>(Math.abs(num&amp;flag0)&lt;=max)<span class="comment">//不要忘了绝对值  </span></div><div class="line">                <span class="keyword">break</span>;  </div><div class="line">        &#125;  </div><div class="line">        flag1 = flag1&lt;&lt;<span class="number">1</span>;  </div><div class="line">        movecount++;  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="keyword">return</span> count;  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 2018-03 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 剑指Offer </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[【Android面试特辑】BroadcastReceiver总结回顾]]></title>
      <url>http://wenjiehe.com/2018/03/17/android-broadcastReceiver-structure/</url>
      <content type="html"><![CDATA[<p>总结一下BroadcastReceiver的内容，建议保存图片查看，欢迎补充。<a id="more"></a></p>
<img src="/images/android/BroadcastReceiver-structure.png">
]]></content>
      
        <categories>
            
            <category> 2018-03 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> android </tag>
            
            <tag> BroadcastReceiver </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[【Android面试特辑】Binder总结回顾]]></title>
      <url>http://wenjiehe.com/2018/03/17/android-binder-structure/</url>
      <content type="html"><![CDATA[<p>总结一下Binder的内容，建议保存图片查看，欢迎补充。<a id="more"></a></p>
<img src="/images/android/Binder-structure.png">
]]></content>
      
        <categories>
            
            <category> 2018-03 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> android </tag>
            
            <tag> Binder </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[【Android面试特辑】Service总结回顾]]></title>
      <url>http://wenjiehe.com/2018/03/17/android-service-structure/</url>
      <content type="html"><![CDATA[<p>总结一下Service的内容，建议保存图片查看，欢迎补充。Binder的内容单独提出来。<a id="more"></a></p>
<img src="/images/android/Service-structure.png">
]]></content>
      
        <categories>
            
            <category> 2018-03 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> android </tag>
            
            <tag> Service </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[【Android面试特辑】Fragment总结回顾]]></title>
      <url>http://wenjiehe.com/2018/03/17/android-fragment-structure/</url>
      <content type="html"><![CDATA[<p>总结一下Fragment的内容，建议保存图片查看，欢迎补充。<a id="more"></a></p>
<img src="/images/android/Fragment-structure.png">
]]></content>
      
        <categories>
            
            <category> 2018-03 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> android </tag>
            
            <tag> fragment </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[【Android面试特辑】Activity总结回顾]]></title>
      <url>http://wenjiehe.com/2018/03/16/android-activity-structure/</url>
      <content type="html"><![CDATA[<p>总结一下Activity的内容，建议保存图片查看，欢迎补充，以后会添加启动过程。<a id="more"></a></p>
<img src="/images/android/Activity-structure.png">
]]></content>
      
        <categories>
            
            <category> 2018-03 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> android </tag>
            
            <tag> activity </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[阿里笔试测试题（零售通App中使用消息数的红点引导用户点击）]]></title>
      <url>http://wenjiehe.com/2018/03/15/ali-interview-test/</url>
      <content type="html"><![CDATA[<p>题目如下<a id="more"></a></p>
<img src="/images/interview/1.png">
<img src="/images/interview/2.png">
<p>这道题当时没做出来，一个是因为时间短，一个是因为思路太不成熟。<br>构建这个树比较麻烦，数据结构选好了其实就比较简单。<br>大致要求就是求得一级节点消息数的最大值。<br>构建这棵树，采用HashMap<string,node>这样可以快速根据字符串找到对应地Node，同时拿一个ArrayList<node>存储下根节点连接的一级节点，便于后期求一级节点。</node></string,node></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">choiceRedDot</span> </span>&#123;  </div><div class="line">    <span class="comment">/*** </span></div><div class="line">r-&gt;a,r-&gt;b,r-&gt;c,a-&gt;e,b-&gt;g,c-&gt;g,c-&gt;h,g-&gt;f </div><div class="line">e:15,f:10,h:6 </div><div class="line">     */  </div><div class="line">  </div><div class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span></span>&#123;  </div><div class="line">        String label;  </div><div class="line">        <span class="keyword">int</span> val=<span class="number">0</span>;  </div><div class="line">        ArrayList&lt;Node&gt; next;  </div><div class="line">        Node()&#123;  </div><div class="line">            next = <span class="keyword">new</span> ArrayList&lt;&gt;();  </div><div class="line">        &#125;  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">static</span> String <span class="title">choiceRedDot</span><span class="params">(String nodePath, String nodeCount)</span> </span>&#123;  </div><div class="line">        String[] link = nodePath.split(<span class="string">","</span>);  </div><div class="line">        String[] count = nodeCount.split(<span class="string">","</span>);  </div><div class="line">  </div><div class="line">        String[] temp;  </div><div class="line">        <span class="comment">//Node root =new Node();  </span></div><div class="line">        Node node1 =<span class="keyword">null</span>;  </div><div class="line">        Node node2 =<span class="keyword">null</span>;  </div><div class="line">        HashMap&lt;String,Node&gt; hashMap = <span class="keyword">new</span> HashMap&lt;&gt;();  </div><div class="line">        ArrayList&lt;Node&gt; list =<span class="keyword">new</span> ArrayList&lt;&gt;();  </div><div class="line">        <span class="keyword">for</span> (String aLink : link) &#123;  </div><div class="line">            temp = aLink.split(<span class="string">"-&gt;"</span>);  </div><div class="line">            <span class="keyword">if</span> (hashMap.containsKey(temp[<span class="number">0</span>])) &#123;  </div><div class="line">                node1 = hashMap.get(temp[<span class="number">0</span>]);  </div><div class="line">            &#125; <span class="keyword">else</span> &#123;  </div><div class="line">                node1 = <span class="keyword">new</span> Node();  </div><div class="line">                node1.label =temp[<span class="number">0</span>];  </div><div class="line">                hashMap.put(temp[<span class="number">0</span>], node1);  </div><div class="line">            &#125;  </div><div class="line">  </div><div class="line">            <span class="keyword">if</span> (hashMap.containsKey(temp[<span class="number">1</span>])) &#123;  </div><div class="line">                node2 = hashMap.get(temp[<span class="number">1</span>]);  </div><div class="line">            &#125; <span class="keyword">else</span> &#123;  </div><div class="line">                node2 = <span class="keyword">new</span> Node();  </div><div class="line">                node2.label =temp[<span class="number">1</span>];  </div><div class="line">                hashMap.put(temp[<span class="number">1</span>], node2);  </div><div class="line">            &#125;  </div><div class="line">  </div><div class="line">            node1.next.add(node2);  </div><div class="line">  </div><div class="line">            <span class="keyword">if</span> (temp[<span class="number">0</span>].equals(<span class="string">"r"</span>)) &#123;  </div><div class="line">                list.add(node2);  </div><div class="line">            &#125;  </div><div class="line">        &#125;  </div><div class="line">  </div><div class="line">        <span class="keyword">for</span>(String cCount :count)&#123;  </div><div class="line">            temp = cCount.split(<span class="string">":"</span>);  </div><div class="line">            node1 = hashMap.get(temp[<span class="number">0</span>]);  </div><div class="line">            node1.val = Integer.valueOf(temp[<span class="number">1</span>]);  </div><div class="line">        &#125;  </div><div class="line">  </div><div class="line">        <span class="keyword">int</span> max =-<span class="number">1</span>;  </div><div class="line">  </div><div class="line">        <span class="keyword">for</span>(Node node:list)&#123;  </div><div class="line">            <span class="keyword">int</span> sum =calculate(node);  </div><div class="line">            <span class="keyword">if</span>(max&lt;sum)&#123;  </div><div class="line">                max = sum;  </div><div class="line">                node1 =node;  </div><div class="line">            &#125;  </div><div class="line">        &#125;  </div><div class="line">        <span class="keyword">return</span> node1.label;  </div><div class="line">  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">calculate</span><span class="params">(Node node)</span></span>&#123;  </div><div class="line">        ArrayList&lt;Node&gt; list = node.next;  </div><div class="line">  </div><div class="line">        <span class="keyword">if</span>(node.val!=<span class="number">0</span>)  </div><div class="line">            <span class="keyword">return</span> node.val;  </div><div class="line">  </div><div class="line">        <span class="keyword">int</span> sum =node.val;  </div><div class="line">        <span class="keyword">for</span> (Node n: list) &#123;  </div><div class="line">            sum+=calculate(n);  </div><div class="line">        &#125;  </div><div class="line">        <span class="keyword">return</span> sum;  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;  </div><div class="line">        Scanner in = <span class="keyword">new</span> Scanner(System.in);  </div><div class="line">        String res;  </div><div class="line">  </div><div class="line">        String _nodePath;  </div><div class="line">        <span class="keyword">try</span> &#123;  </div><div class="line">            _nodePath = in.nextLine();  </div><div class="line">  </div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;  </div><div class="line">            _nodePath = <span class="keyword">null</span>;  </div><div class="line">        &#125;  </div><div class="line">  </div><div class="line">        String _nodeCount;  </div><div class="line">        <span class="keyword">try</span> &#123;  </div><div class="line">            _nodeCount = in.nextLine();  </div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;  </div><div class="line">            _nodeCount = <span class="keyword">null</span>;  </div><div class="line">        &#125;  </div><div class="line">  </div><div class="line">        res = choiceRedDot(_nodePath, _nodeCount);  </div><div class="line">        System.out.println(res);  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>完整代码如上，只经过基本的case测试，大型case效率估计有问题，calculate做了一些避免重复计算的优化，但感觉这方案肯定不是最优设计。</p>
<p>欢迎大家交流~</p>
]]></content>
      
        <categories>
            
            <category> 2018-03 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 笔试题 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LeetCode【82. Remove Duplicates from Sorted List II】]]></title>
      <url>http://wenjiehe.com/2018/01/11/2018-01-11-Remove-Duplicates-from-Sorted-List/</url>
      <content type="html"><![CDATA[<p>本文的题目是一道中等难度题（82题），之前没有注意删除头结点时的技巧。<a id="more"></a></p>
<h4 id="题目内容"><a href="#题目内容" class="headerlink" title="题目内容"></a>题目内容</h4><p>Given a sorted linked list, delete all nodes that have duplicate numbers, leaving only distinct numbers from the original list.</p>
<p>For example,<br>Given 1-&gt;2-&gt;3-&gt;3-&gt;4-&gt;4-&gt;5, return 1-&gt;2-&gt;5.<br>Given 1-&gt;1-&gt;1-&gt;2-&gt;3, return 2-&gt;3.</p>
<h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>这道题在做了好久，开始希望先保证头结点唯一，但后来继续实现发现，保证头结点唯一和保证其他结点唯一方法类似。看各种判断语句感觉这代码不能这么写啊！<br>然后去百度，看到有人用添加头结点的方式构造。学了这一手，然后自己写了代码。代码有什么不懂的可以留言讨论。</p>
<h4 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/** </span></div><div class="line">* Definition for singly-linked list. </div><div class="line">* public class ListNode &#123; </div><div class="line">*     int val; </div><div class="line">*     ListNode next; </div><div class="line">*     ListNode(int x) &#123; val = x; &#125; </div><div class="line">* &#125; </div><div class="line">*/  </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;  </div><div class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">deleteDuplicates</span><span class="params">(ListNode head)</span> </span>&#123;  </div><div class="line">        <span class="keyword">if</span>(head==<span class="keyword">null</span>||head.next==<span class="keyword">null</span>)  </div><div class="line">            <span class="keyword">return</span> head;  </div><div class="line">      </div><div class="line">        ListNode cur =head;  </div><div class="line">        ListNode newHead =<span class="keyword">new</span> ListNode(head.next.val);<span class="comment">//小技巧，第一个结点，让左边等于右边咯 </span></div><div class="line">        ListNode pre =newHead;<span class="comment">//当前结点的前一个结点  </span></div><div class="line">        ListNode preSuccess =newHead;<span class="comment">//前一个唯一结点  </span></div><div class="line">        pre.next =head;<span class="comment">//连接虚拟头结点到链表  </span></div><div class="line">          </div><div class="line">        <span class="keyword">while</span>(cur!=<span class="keyword">null</span>&amp;&amp;cur.next!=<span class="keyword">null</span>)&#123;  </div><div class="line">            <span class="keyword">if</span>(pre.val==cur.val||cur.val==cur.next.val)&#123;  </div><div class="line">                pre =cur;  </div><div class="line">                cur =cur.next;  </div><div class="line">                <span class="keyword">if</span>(cur!=<span class="keyword">null</span>&amp;&amp;cur.next==<span class="keyword">null</span>)&#123;<span class="comment">//只剩下最后一个（如果倒数第二个已经加入链表，那么最后一个也默认加入了）  </span></div><div class="line">                    <span class="keyword">if</span>(pre.val!=cur.val)<span class="comment">//pre和preSuccess不一定相等哦 preSuccess不一定连接着cur  </span></div><div class="line">                        preSuccess.next =cur;  </div><div class="line">                    <span class="keyword">else</span>  </div><div class="line">                        preSuccess.next=<span class="keyword">null</span>;  </div><div class="line">                &#125;  </div><div class="line">            &#125;<span class="keyword">else</span>&#123;  </div><div class="line">                preSuccess.next =cur;  </div><div class="line">                preSuccess =cur;  </div><div class="line">                pre =cur;  </div><div class="line">                cur =cur.next;           </div><div class="line">            &#125;     </div><div class="line">        &#125;  </div><div class="line">  </div><div class="line">        <span class="keyword">return</span> newHead.next;  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h4><p>原题链接：<a href="https://leetcode.com/problems/remove-duplicates-from-sorted-list-ii/description/" target="_blank" rel="external">82. Remove Duplicates from Sorted List II</a><br>参考思路：<a href="http://blog.csdn.net/linhuanmars/article/details/24389429" target="_blank" rel="external">Remove Duplicates from Sorted List II – LeetCode</a></p>
]]></content>
      
        <categories>
            
            <category> 2018-01 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> 链表 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Android7.0完美适配——FileProvider拍照裁剪全解析]]></title>
      <url>http://wenjiehe.com/2017/05/30/2017-05-30-android-fileprovider/</url>
      <content type="html"><![CDATA[<p>在做android7.0的适配时，发现拍照裁剪图片等功能莫名其妙地崩溃了。通过观察控制台的崩溃记录，原因很明显，file:// 不被允许作为一个附加的 Uri 的意图，否则会抛出 FileUriExposedException，接下来就依次适配之。<a id="more"></a></p>
<h4 id="FileProvider介绍"><a href="#FileProvider介绍" class="headerlink" title="FileProvider介绍"></a>FileProvider介绍</h4><blockquote>
<p>官方对于 FileProvider 的解释为：FileProvider 是一个特殊的 ContentProvider 子类，通过 content://Uri 代替 file://Uri 实现不同 App 间的文件安全共享。当通过包含 Content URI 的 Intent 共享文件时，需要申请临时的读写权限，可以通过 Intent.setFlags() 方法实现。<br>而 file://Uri 方式需要申请长期有效的文件读写权限，直到这个权限被手动改变为止，这是极其不安全的做法。因此 Android 从 N 版本开始禁止通过 file://Uri 在不同 App 之间共享文件。<br>FileProvider并不是最新出来的东西，而是以前就已经存在，由于Android的安全机制 ，一个进程默认不能影响另外一个进程的，如读取私有数据 。 那么对于进程间的文件的共享 ，出于安全考虑，用FileProvider。FileProvider会基于manifest中的定义定义的一个xml文件（xml目录 下），为所有定义的文件生成content URIs，这样外部的应用在没有权限的情况下，可以通过授予临时权限的content uri，读取相应的文件。<br>谷歌做这项规定主要是针对，包含文件 URI 的 Intent 离开你的应用，换句话说，如果你的Intent中用到了Uri，这个时候你就需要提防一下了，比如说，你使用到了图片裁剪等功能。</p>
</blockquote>
<h4 id="需要适配修改的地方"><a href="#需要适配修改的地方" class="headerlink" title="需要适配修改的地方"></a>需要适配修改的地方</h4><blockquote>
<p>Uri.parse<br>Uri.fromFile<br>file://<br>content://<br>Context.getFilesDir()、Environment.getExternalStorageDirectory()、getCacheDir()以及最终要的intent.setDataAndType(为什么需要找这个，因为这个会携带uri进行传递，这个是重头戏)</p>
</blockquote>
<h4 id="FileProvider基本使用流程"><a href="#FileProvider基本使用流程" class="headerlink" title="FileProvider基本使用流程"></a>FileProvider基本使用流程</h4><p>1.定义一个 FileProvider<br>2.指定共享目录<br>3.为文件生成有效的 Content URI<br>4.申请临时的读写权限<br>5.发送 Content URI 至其他的 App</p>
<h5 id="定义一个-FileProvider"><a href="#定义一个-FileProvider" class="headerlink" title="定义一个 FileProvider"></a>定义一个 FileProvider</h5><p>因为是ContentProvider的子类，所以也必须要在Manifest.xml中声明<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">application</span>&gt;</span></div><div class="line">    ...</div><div class="line">    <span class="tag">&lt;<span class="name">provider</span></span></div><div class="line">        <span class="attr">android:name</span>=<span class="string">"android.support.v4.content.FileProvider"</span></div><div class="line">        <span class="attr">android:authorities</span>=<span class="string">"$&#123;applicationId&#125;.provider"</span></div><div class="line">        <span class="attr">android:exported</span>=<span class="string">"false"</span></div><div class="line">        <span class="attr">android:grantUriPermissions</span>=<span class="string">"true"</span>&gt;</div><div class="line">        <span class="tag">&lt;<span class="name">meta-data</span></span></div><div class="line">                <span class="attr">android:name</span>=<span class="string">"android.support.FILE_PROVIDER_PATHS"</span></div><div class="line">                <span class="attr">android:resource</span>=<span class="string">"@xml/filepaths"</span>/&gt;</div><div class="line">    <span class="tag">&lt;/<span class="name">provider</span>&gt;</span></div><div class="line">    ...</div><div class="line"><span class="tag">&lt;/<span class="name">application</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>name的写法是固定的，不过如果你打算作为lib提供给别人可能要考虑冲突，可以继承这个类，然后不实现，以作区分。此说法来自参考链接四。</p>
<p>grantUriPermissions：申明为true，你才能获取临时共享权限</p>
<h5 id="指定共享目录"><a href="#指定共享目录" class="headerlink" title="指定共享目录"></a>指定共享目录</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">paths</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!--        xml文件是唯一设置分享的目录 ，不能用代码设置</span></div><div class="line"></div><div class="line">         1.&lt;files-path&gt;        getFilesDir()  /data/data//files目录</div><div class="line">         2.&lt;cache-path&gt;        getCacheDir()  /data/data//cache目录</div><div class="line"></div><div class="line">         3.&lt;external-path&gt;     Environment.getExternalStorageDirectory()</div><div class="line"></div><div class="line">         SDCard/Android/data/你的应用的包名/files/ 目录</div><div class="line">         4.&lt;external-files-path&gt;     Context#getExternalFilesDir(String) Context.getExternalFilesDir(null).</div><div class="line">         5.&lt;external-cache-path&gt;      Context.getExternalCacheDir().</div><div class="line">     --&gt;</div><div class="line"></div><div class="line">    <span class="comment">&lt;!--    path :代表设置的目录下一级目录 eg：&lt;external-path path="images/"</span></div><div class="line">                整个目录为Environment.getExternalStorageDirectory()+"/images/"</div><div class="line">            name: 代表定义在Content中的字段 eg：name = "myimages" ，并且请求的内容的文件名为default_image.jpg</div><div class="line">                则 返回一个URI   content://com.example.myapp.fileprovider/myimages/default_image.jpg</div><div class="line">    --&gt;</div><div class="line">    <span class="comment">&lt;!--当path 为空时 5个全配置就可以解决--&gt;</span></div><div class="line">    <span class="comment">&lt;!--下载apk--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">external-path</span> <span class="attr">path</span>=<span class="string">""</span> <span class="attr">name</span>=<span class="string">"sdcard_files"</span> /&gt;</span></div><div class="line">    <span class="comment">&lt;!--相机相册裁剪--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">external-files-path</span>   <span class="attr">path</span>=<span class="string">"file/"</span> <span class="attr">name</span>=<span class="string">"camera_has_sdcard"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">files-path</span> <span class="attr">path</span>=<span class="string">""</span>     <span class="attr">name</span>=<span class="string">"camera_no_sdcard"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">paths</span>&gt;</span></div></pre></td></tr></table></figure>
<p>可以看出，这五种子元素基本涵盖内外存储空间所有目录路径，包含应用私有目录。同时，每个子元素都拥有 name 和 path 两个属性。<br>path 属性用于指定当前子元素所代表目录下需要共享的子目录名称。注意：path 属性值不能使用具体的独立文件名，只能是目录名。path只能添加一个路径，如果需要共享多个则指定多个即可。<br>name 属性用于给 path 属性所指定的子目录名称取一个别名。后续生成 content:// URI 时，会使用这个别名代替真实目录名。这样做的目的，很显然是为了提高安全性。</p>
<h5 id="生成有效的-Content-URI"><a href="#生成有效的-Content-URI" class="headerlink" title="生成有效的 Content URI"></a>生成有效的 Content URI</h5><p>这边简略叙述，后面实战时详细介绍。</p>
<p>在 Android 7.0 出现之前，我们通常使用 Uri.fromFile() 方法生成一个 File URI。这里，我们需要使用 FileProvider 类提供的公有静态方法 getUriForFile 生成 Content URI。</p>
<blockquote>
<p>文件配置完成后还需要生成可以被其他 App 访问的 Content URI，可以直接调用 FileProvider 提供的 getUriForFile(File file) 方法，顾名思义，传入文件名称就可以得到相应的 Content URI 。需要访问该文件的 App 可以通过 ContentResolver.openFileDescriptor 得到一个 ParcelFileDescriptor 对象。</p>
<p>假定你想要共享一个图片文件，文件存放的位置为手机内部存储空间下的 images 文件夹，图片文件名字为 default_name.jpg ，那么生成 Content URI 方式如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">File imagePath = new File(getContext().getFilesDir(), &quot;images&quot;);</div><div class="line">File newFile = new File(imagePath, &quot;default_image.jpg&quot;);</div><div class="line">Uri contentUri = getUriForFile(getContext(), &quot;com.mydomain.provider&quot;, newFile);</div></pre></td></tr></table></figure>
<p>最后生成的 Content URI 为<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">content://com.domain.example.provider/images/default_image.jpg.</div></pre></td></tr></table></figure></p>
</blockquote>
<h5 id="申请临时的读写权限"><a href="#申请临时的读写权限" class="headerlink" title="申请临时的读写权限"></a>申请临时的读写权限</h5><blockquote>
<p>生成 Content URI 对象后，需要对其授权访问权限。授权方式有两种：<br>第一种方式，使用 Context 提供的 grantUriPermission(package, Uri, mode_flags) 方法向其他应用授权访问 URI 对象。三个参数分别表示授权访问 URI 对象的其他应用包名，授权访问的 Uri 对象，和授权类型。其中，授权类型为 Intent 类提供的读写类型常量：</p>
<p>FLAG_GRANT_READ_URI_PERMISSION</p>
<p>FLAG_GRANT_WRITE_URI_PERMISSION</p>
<p>或者二者同时授权。这种形式的授权方式，权限有效期截止至发生设备重启或者手动调用 revokeUriPermission() 方法撤销授权时。</p>
<p>第二种方式，配合 Intent 使用。通过 setData() 方法向 intent 对象添加 Content URI。然后使用 setFlags() 或者 addFlags() 方法设置读写权限，可选常量值同上。这种形式的授权方式，权限有效期截止至其它应用所处的堆栈销毁，并且一旦授权给某一个组件后，该应用的其它组件拥有相同的访问权限。</p>
</blockquote>
<h5 id="发送-Content-URI"><a href="#发送-Content-URI" class="headerlink" title="发送 Content URI"></a>发送 Content URI</h5><blockquote>
<p>拥有授予权限的 Content URI 后，便可以通过 startActivity() 或者 setResult() 方法启动其他应用并传递授权过的 Content URI 数据。当然，也有其他方式提供服务。</p>
<p>如果你需要一次性传递多个 URI 对象，可以使用 intent 对象提供的 setClipData() 方法，并且 setFlags() 方法设置的权限适用于所有 Content URIs。</p>
</blockquote>
<p>举个例子:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Intent intent = <span class="keyword">new</span> Intent(Intent.ACTION_GET_CONTENT);</div><div class="line">intent.addCategory(Intent.CATEGORY_OPENABLE);</div><div class="line">intent.setType(<span class="string">"image/*"</span>);</div><div class="line">Uri uriForFile = FileProvider.getUriForFile(<span class="keyword">this</span>,<span class="string">"com.wenjiehe.android_study.fileprovider"</span>, mGalleryFile);</div><div class="line">intent.putExtra(MediaStore.EXTRA_OUTPUT, uriForFile);</div><div class="line">intent.addFlags(Intent.FLAG_GRANT_WRITE_URI_PERMISSION);</div><div class="line">intent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);</div><div class="line">startActivityForResult(intent, SELECT_PIC_NOUGAT);</div></pre></td></tr></table></figure></p>
<p><a href="https://developer.android.com/reference/android/support/v4/content/FileProvider.html" target="_blank" rel="external">官方文档地址</a></p>
<h4 id="两种过程对比"><a href="#两种过程对比" class="headerlink" title="两种过程对比"></a>两种过程对比</h4><p>为什么在 Android Nougat 下 file:// 不被允许？<br>其实背后有一个很好的理由，如果文件路径被发送到目标应用程序（在这种情况下，是相机应用程序），文件将在访问相机应用程序的过程中被完全访问，而不仅仅只有发起者能收到。（原文：If file path is sent to the target application (Camera app in this case), file will be fully accessed through the Camera app’s process not the sender one.）实际上就是我们把控制权交给了相机程序，而作为这个file的拥有者的我们完全丧失了控制权。</p>
<img src="/images/fileprovider/1.jpg"> 
<p>但让我们考虑一下，实际上是由我们的应用程序去启动摄像头拍照，并保存作为我们的应用程序的代表文件。因此，该文件的访问权限应该是我们的应用程序而不是摄像头应用程序本身。这就是为什么现在 file:// 在 targetSdkVersion 24 中要求每一位开发者都去完成这个任务。</p>
<p>FileProvider的解决方案</p>
<img src="/images/fileprovider/2.jpg"> 
<p>使用FileProvider，其实就是收回控制权，通过赋予相机程序临时的读写权限，掌握File文件的绝对控制！</p>
<h4 id="FileProvider实战"><a href="#FileProvider实战" class="headerlink" title="FileProvider实战"></a>FileProvider实战</h4><h5 id="手机拍照"><a href="#手机拍照" class="headerlink" title="手机拍照"></a>手机拍照</h5><p>在 Android N 之前的版本调用相机获取图片可以用如下代码实现<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 指定调用相机拍照后照片的储存路径</span></div><div class="line">File imgFile = <span class="keyword">new</span> File(imgPath);</div><div class="line">Uri imgUri = <span class="keyword">null</span>;</div><div class="line">imgUri = Uri.fromFile(imgFile);</div><div class="line">Intent intent = <span class="keyword">new</span> Intent(MediaStore.ACTION_IMAGE_CAPTURE);</div><div class="line">intent.putExtra(MediaStore.EXTRA_OUTPUT,imgUri);</div><div class="line">startActivityForResult(intent, takePhotoRequestCode);</div></pre></td></tr></table></figure></p>
<p>这边主要修改fromFile的调用<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">String path = Environment.getExternalStorageDirectory()+<span class="string">"/Android/data/com.wenjiehe.android_study/files/"</span>;</div><div class="line">File mCameraFile = <span class="keyword">new</span> File(path, <span class="string">"IMAGE_FILE_NAME.jpg"</span>);<span class="comment">//照相机的File对象</span></div><div class="line">Intent intentFromCapture = <span class="keyword">new</span> Intent(MediaStore.ACTION_IMAGE_CAPTURE);</div><div class="line"><span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.N) &#123;<span class="comment">//7.0及以上</span></div><div class="line">    Uri uriForFile = FileProvider.getUriForFile(<span class="keyword">this</span>, <span class="string">"com.wenjiehe.android_study.fileprovider"</span>, mCameraFile);</div><div class="line">    intentFromCapture.putExtra(MediaStore.EXTRA_OUTPUT, uriForFile);</div><div class="line">    intentFromCapture.addFlags(FLAG_GRANT_READ_URI_PERMISSION);</div><div class="line">    intentFromCapture.addFlags(FLAG_GRANT_WRITE_URI_PERMISSION);</div><div class="line"><span class="comment">//  mCameraFile -&gt; /storage/emulated/0/Android/data/com.wenjiehe.android_study/files/IMAGE_FILE_NAME.jpg</span></div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">    intentFromCapture.putExtra(MediaStore.EXTRA_OUTPUT, Uri.fromFile(mCameraFile));</div><div class="line">&#125;</div><div class="line">startActivityForResult(intentFromCapture, CAMERA_REQUEST_CODE);</div></pre></td></tr></table></figure></p>
<p>这边我是放在了外部存储的私有目录。值得说明的是，这个目录的访问也是不需要访问SD卡的权限的，外部私有目录。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">case</span> CAMERA_REQUEST_CODE: &#123;<span class="comment">//照相后返回</span></div><div class="line">    <span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.N) &#123;</div><div class="line">        Uri inputUri = FileProvider.getUriForFile(<span class="keyword">this</span>, <span class="string">"com.wenjiehe.android_study.fileprovider"</span>, mCameraFile);<span class="comment">//通过FileProvider创建一个content类型的Uri</span></div><div class="line"><span class="comment">// inputUri -&gt; content://com.wenjiehe.android_study.fileprovider/sdcard_files/Android/data/com.wenjiehe.android_study/files/IMAGE_FILE_NAME.jpg</span></div><div class="line">        startPhotoZoom(inputUri);<span class="comment">//设置输入类型</span></div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        Uri inputUri = Uri.fromFile(mCameraFile);</div><div class="line">        startPhotoZoom(inputUri);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">break</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="相册"><a href="#相册" class="headerlink" title="相册"></a>相册</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">Intent intent = <span class="keyword">new</span> Intent(Intent.ACTION_GET_CONTENT);</div><div class="line">intent.addCategory(Intent.CATEGORY_OPENABLE);</div><div class="line">intent.setType(<span class="string">"image/*"</span>);</div><div class="line"><span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.N) &#123;<span class="comment">//如果大于等于7.0使用FileProvider</span></div><div class="line">    Uri uriForFile = FileProvider.getUriForFile</div><div class="line">            (<span class="keyword">this</span>, <span class="string">"com.wenjiehe.android_study.fileprovider"</span>, mGalleryFile);</div><div class="line">    intent.putExtra(MediaStore.EXTRA_OUTPUT, uriForFile);</div><div class="line">    intent.addFlags(Intent.FLAG_GRANT_WRITE_URI_PERMISSION);</div><div class="line">    intent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);</div><div class="line">    startActivityForResult(intent, SELECT_PIC_NOUGAT);</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">    <span class="comment">//intent.putExtra(MediaStore.EXTRA_OUTPUT, Uri.fromFile(mGalleryFile));</span></div><div class="line">    startActivityForResult(intent, IMAGE_REQUEST_CODE);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">case</span> IMAGE_REQUEST_CODE: &#123;<span class="comment">//版本&lt;7.0  图库后返回</span></div><div class="line">    <span class="keyword">if</span> (data != <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="comment">// 得到图片的全路径</span></div><div class="line">        Uri uri = data.getData();</div><div class="line">        <span class="comment">//crop(uri);</span></div><div class="line">        startPhotoZoom(uri);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">break</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">case</span> SELECT_PIC_NOUGAT:<span class="comment">//版本&gt;= 7.0</span></div><div class="line">    File imgUri = <span class="keyword">new</span> File(GetImagePath.getPath(<span class="keyword">this</span>, data.getData()));</div><div class="line">    Uri dataUri = FileProvider.getUriForFile</div><div class="line">            (<span class="keyword">this</span>, <span class="string">"com.wenjiehe.android_study.fileprovider"</span>, imgUri);</div><div class="line">    <span class="comment">// Uri dataUri = getImageContentUri(data.getData());</span></div><div class="line">    startPhotoZoom(dataUri);</div><div class="line">    <span class="keyword">break</span>;</div></pre></td></tr></table></figure>
<h5 id="裁剪"><a href="#裁剪" class="headerlink" title="裁剪"></a>裁剪</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startPhotoZoom</span><span class="params">(Uri inputUri)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (inputUri == <span class="keyword">null</span>) &#123;</div><div class="line">        Log.e(<span class="string">"error"</span>,<span class="string">"The uri is not exist."</span>);</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    Intent intent = <span class="keyword">new</span> Intent(<span class="string">"com.android.camera.action.CROP"</span>);</div><div class="line">    <span class="comment">//sdk&gt;=24</span></div><div class="line">    <span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.N) &#123;</div><div class="line">        Uri outPutUri = Uri.fromFile(mCropFile);</div><div class="line"><span class="comment">// outPutUri -&gt; file:///storage/emulated/0/Android/data/com.wenjiehe.android_study/files/PHOTO_FILE_NAME.jpg</span></div><div class="line">        intent.setDataAndType(inputUri, <span class="string">"image/*"</span>);</div><div class="line">        intent.putExtra(MediaStore.EXTRA_OUTPUT, outPutUri);</div><div class="line">        intent.addFlags(FLAG_GRANT_READ_URI_PERMISSION);</div><div class="line">        intent.addFlags(FLAG_GRANT_WRITE_URI_PERMISSION);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        Uri outPutUri = Uri.fromFile(mCropFile);</div><div class="line">        <span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= android.os.Build.VERSION_CODES.KITKAT) &#123;</div><div class="line">            String url = GetImagePath.getPath(<span class="keyword">this</span>, inputUri);<span class="comment">//这个方法是处理4.4以上图片返回的Uri对象不同的处理方法</span></div><div class="line">            intent.setDataAndType(Uri.fromFile(<span class="keyword">new</span> File(url)), <span class="string">"image/*"</span>);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            intent.setDataAndType(inputUri, <span class="string">"image/*"</span>);</div><div class="line">        &#125;</div><div class="line">        intent.putExtra(MediaStore.EXTRA_OUTPUT, outPutUri);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">// 设置裁剪</span></div><div class="line">    intent.putExtra(<span class="string">"crop"</span>, <span class="string">"true"</span>);</div><div class="line">    <span class="comment">// aspectX aspectY 是宽高的比例</span></div><div class="line">    intent.putExtra(<span class="string">"aspectX"</span>, <span class="number">1</span>);</div><div class="line">    intent.putExtra(<span class="string">"aspectY"</span>, <span class="number">1</span>);</div><div class="line">    <span class="comment">// outputX outputY 是裁剪图片宽高</span></div><div class="line">    intent.putExtra(<span class="string">"outputX"</span>, <span class="number">250</span>);</div><div class="line">    intent.putExtra(<span class="string">"outputY"</span>, <span class="number">250</span>);</div><div class="line">    intent.putExtra(<span class="string">"return-data"</span>, <span class="keyword">false</span>);</div><div class="line">    intent.putExtra(<span class="string">"noFaceDetection"</span>, <span class="keyword">false</span>);<span class="comment">//去除默认的人脸识别，否则和剪裁匡重叠</span></div><div class="line">    intent.putExtra(<span class="string">"outputFormat"</span>, <span class="string">"JPEG"</span>);</div><div class="line">    <span class="comment">//intent.putExtra("outputFormat", Bitmap.CompressFormat.JPEG.toString());// 图片格式</span></div><div class="line">    startActivityForResult(intent, RESULT_REQUEST_CODE);<span class="comment">//这里就将裁剪后的图片的Uri返回了</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>版本高于7.0的，显然要是用FileProvider<br>版本高于4.4的，图片路径有一个分水岭问题，所以需要转换一下</p>
<h4 id="终章"><a href="#终章" class="headerlink" title="终章"></a>终章</h4><h5 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Button3Activity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> <span class="keyword">implements</span> <span class="title">View</span>.<span class="title">OnClickListener</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@BindView</span>(R.id.button30)</div><div class="line">    Button button30;</div><div class="line"></div><div class="line">    <span class="meta">@BindView</span>(R.id.button31)</div><div class="line">    Button button31;</div><div class="line"></div><div class="line">    <span class="meta">@BindView</span>(R.id.iv_photo)</div><div class="line">    ImageView iv_photo;</div><div class="line"></div><div class="line"></div><div class="line">    String path = Environment.getExternalStorageDirectory()+<span class="string">"/Android/data/com.wenjiehe.android_study/files/"</span>;</div><div class="line">    File mCameraFile = <span class="keyword">new</span> File(path, <span class="string">"IMAGE_FILE_NAME.jpg"</span>);<span class="comment">//照相机的File对象</span></div><div class="line">    File mCropFile = <span class="keyword">new</span> File(path, <span class="string">"PHOTO_FILE_NAME.jpg"</span>);<span class="comment">//裁剪后的File对象</span></div><div class="line">    File mGalleryFile = <span class="keyword">new</span> File(path, <span class="string">"IMAGE_GALLERY_NAME.jpg"</span>);<span class="comment">//相册的File对象</span></div><div class="line"></div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> IMAGE_REQUEST_CODE = <span class="number">100</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> SELECT_PIC_NOUGAT = <span class="number">101</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> RESULT_REQUEST_CODE = <span class="number">102</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> CAMERA_REQUEST_CODE = <span class="number">104</span>;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_button3);</div><div class="line"></div><div class="line">        ButterKnife.bind(<span class="keyword">this</span>);</div><div class="line"></div><div class="line">        button30.setOnClickListener(<span class="keyword">this</span>);</div><div class="line">        button31.setOnClickListener(<span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">        <span class="keyword">switch</span> (v.getId())&#123;</div><div class="line">            <span class="keyword">case</span> R.id.button30:&#123;</div><div class="line"></div><div class="line"></div><div class="line">                Intent intentFromCapture = <span class="keyword">new</span> Intent(MediaStore.ACTION_IMAGE_CAPTURE);</div><div class="line">                <span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.N) &#123;<span class="comment">//7.0及以上</span></div><div class="line">                    Uri uriForFile = FileProvider.getUriForFile(<span class="keyword">this</span>, <span class="string">"com.wenjiehe.android_study.fileprovider"</span>, mCameraFile);</div><div class="line">                    intentFromCapture.putExtra(MediaStore.EXTRA_OUTPUT, uriForFile);</div><div class="line">                    intentFromCapture.addFlags(FLAG_GRANT_READ_URI_PERMISSION);</div><div class="line">                    intentFromCapture.addFlags(FLAG_GRANT_WRITE_URI_PERMISSION);</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    intentFromCapture.putExtra(MediaStore.EXTRA_OUTPUT, Uri.fromFile(mCameraFile));</div><div class="line">                &#125;</div><div class="line">                startActivityForResult(intentFromCapture, CAMERA_REQUEST_CODE);</div><div class="line"></div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">case</span> R.id.button31:&#123;</div><div class="line">                Intent intent = <span class="keyword">new</span> Intent(Intent.ACTION_GET_CONTENT);</div><div class="line">                intent.addCategory(Intent.CATEGORY_OPENABLE);</div><div class="line">                intent.setType(<span class="string">"image/*"</span>);</div><div class="line">                <span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.N) &#123;<span class="comment">//如果大于等于7.0使用FileProvider</span></div><div class="line">                    Uri uriForFile = FileProvider.getUriForFile</div><div class="line">                            (<span class="keyword">this</span>, <span class="string">"com.wenjiehe.android_study.fileprovider"</span>, mGalleryFile);</div><div class="line">                    intent.putExtra(MediaStore.EXTRA_OUTPUT, uriForFile);</div><div class="line">                    intent.addFlags(Intent.FLAG_GRANT_WRITE_URI_PERMISSION);</div><div class="line">                    intent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);</div><div class="line">                    startActivityForResult(intent, SELECT_PIC_NOUGAT);</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    <span class="comment">//intent.putExtra(MediaStore.EXTRA_OUTPUT, Uri.fromFile(mGalleryFile));</span></div><div class="line">                    startActivityForResult(intent, IMAGE_REQUEST_CODE);</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onActivityResult</span><span class="params">(<span class="keyword">int</span> requestCode, <span class="keyword">int</span> resultCode, Intent data)</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">switch</span> (requestCode)&#123;</div><div class="line">            <span class="keyword">case</span> CAMERA_REQUEST_CODE: &#123;<span class="comment">//照相后返回</span></div><div class="line">                <span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.N) &#123;</div><div class="line">                    Uri inputUri = FileProvider.getUriForFile(<span class="keyword">this</span>, <span class="string">"com.wenjiehe.android_study.fileprovider"</span>, mCameraFile);<span class="comment">//通过FileProvider创建一个content类型的Uri</span></div><div class="line"></div><div class="line">                    startPhotoZoom(inputUri);<span class="comment">//设置输入类型</span></div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    Uri inputUri = Uri.fromFile(mCameraFile);</div><div class="line">                    startPhotoZoom(inputUri);</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">case</span> IMAGE_REQUEST_CODE: &#123;<span class="comment">//版本&lt;7.0  图库后返回</span></div><div class="line">                <span class="keyword">if</span> (data != <span class="keyword">null</span>) &#123;</div><div class="line">                    <span class="comment">// 得到图片的全路径</span></div><div class="line">                    Uri uri = data.getData();</div><div class="line">                    <span class="comment">//crop(uri);</span></div><div class="line">                    startPhotoZoom(uri);</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">case</span> SELECT_PIC_NOUGAT:<span class="comment">//版本&gt;= 7.0</span></div><div class="line">				<span class="comment">//获取图片的真实路径，再构建Content Uri</span></div><div class="line">                File imgUri = <span class="keyword">new</span> File(GetImagePath.getPath(<span class="keyword">this</span>, data.getData()));</div><div class="line">                Uri dataUri = FileProvider.getUriForFile</div><div class="line">                        (<span class="keyword">this</span>, <span class="string">"com.wenjiehe.android_study.fileprovider"</span>, imgUri);</div><div class="line">                <span class="comment">// Uri dataUri = getImageContentUri(data.getData());</span></div><div class="line">                startPhotoZoom(dataUri);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> RESULT_REQUEST_CODE:&#123;</div><div class="line">                Uri inputUri = FileProvider.getUriForFile(<span class="keyword">this</span>, <span class="string">"com.wenjiehe.android_study.fileprovider"</span>, mCropFile);<span class="comment">//通过FileProvider创建一个content类型的Uri</span></div><div class="line">                Bitmap bitmap = <span class="keyword">null</span>;</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    bitmap = BitmapFactory.decodeStream(getContentResolver().openInputStream(inputUri));</div><div class="line">                &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</div><div class="line">                    e.printStackTrace();</div><div class="line">                &#125;</div><div class="line">                <span class="comment">//Bitmap bitmap = data.getParcelableExtra("data");</span></div><div class="line">                iv_photo.setImageBitmap(bitmap);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">crop</span><span class="params">(Uri uri)</span> </span>&#123;</div><div class="line">        <span class="comment">// 裁剪图片意图</span></div><div class="line">        Intent intent = <span class="keyword">new</span> Intent(<span class="string">"com.android.camera.action.CROP"</span>);</div><div class="line">        intent.setDataAndType(uri, <span class="string">"image/*"</span>);</div><div class="line">        intent.putExtra(<span class="string">"crop"</span>, <span class="string">"true"</span>);</div><div class="line">        <span class="comment">// 裁剪框的比例，1：1</span></div><div class="line">        intent.putExtra(<span class="string">"aspectX"</span>, <span class="number">1</span>);</div><div class="line">        intent.putExtra(<span class="string">"aspectY"</span>, <span class="number">1</span>);</div><div class="line">        <span class="comment">// 裁剪后输出图片的尺寸大小</span></div><div class="line">        intent.putExtra(<span class="string">"outputX"</span>, <span class="number">250</span>);</div><div class="line">        intent.putExtra(<span class="string">"outputY"</span>, <span class="number">250</span>);</div><div class="line">        <span class="comment">// 图片格式</span></div><div class="line">        intent.putExtra(<span class="string">"outputFormat"</span>, <span class="string">"JPEG"</span>);</div><div class="line">        intent.putExtra(<span class="string">"noFaceDetection"</span>, <span class="keyword">true</span>);<span class="comment">// 取消人脸识别</span></div><div class="line">        intent.putExtra(<span class="string">"return-data"</span>, <span class="keyword">true</span>);<span class="comment">// true:不返回uri，false：返回uri</span></div><div class="line">        intent.setFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);</div><div class="line">        startActivityForResult(intent, RESULT_REQUEST_CODE);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 裁剪图片方法实现</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> inputUri</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startPhotoZoom</span><span class="params">(Uri inputUri)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (inputUri == <span class="keyword">null</span>) &#123;</div><div class="line">            Log.e(<span class="string">"error"</span>,<span class="string">"The uri is not exist."</span>);</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        Intent intent = <span class="keyword">new</span> Intent(<span class="string">"com.android.camera.action.CROP"</span>);</div><div class="line">        <span class="comment">//sdk&gt;=24</span></div><div class="line">        <span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.N) &#123;</div><div class="line"></div><div class="line">            Uri outPutUri = Uri.fromFile(mCropFile);</div><div class="line">            intent.setDataAndType(inputUri, <span class="string">"image/*"</span>);</div><div class="line">            intent.putExtra(MediaStore.EXTRA_OUTPUT, outPutUri);</div><div class="line">            intent.addFlags(FLAG_GRANT_READ_URI_PERMISSION);</div><div class="line">            intent.addFlags(FLAG_GRANT_WRITE_URI_PERMISSION);</div><div class="line"></div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">		    <span class="comment">//获取图片的真实路径，再构建Content Uri</span></div><div class="line">            Uri outPutUri = Uri.fromFile(mCropFile);</div><div class="line">            <span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= android.os.Build.VERSION_CODES.KITKAT) &#123;</div><div class="line">                String url = GetImagePath.getPath(<span class="keyword">this</span>, inputUri);<span class="comment">//这个方法是处理4.4以上图片返回的Uri对象不同的处理方法</span></div><div class="line">                intent.setDataAndType(Uri.fromFile(<span class="keyword">new</span> File(url)), <span class="string">"image/*"</span>);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                intent.setDataAndType(inputUri, <span class="string">"image/*"</span>);</div><div class="line">            &#125;</div><div class="line">            intent.putExtra(MediaStore.EXTRA_OUTPUT, outPutUri);</div><div class="line">        &#125;</div><div class="line"></div><div class="line"></div><div class="line">        <span class="comment">// 设置裁剪</span></div><div class="line">        intent.putExtra(<span class="string">"crop"</span>, <span class="string">"true"</span>);</div><div class="line">        <span class="comment">// aspectX aspectY 是宽高的比例</span></div><div class="line">        intent.putExtra(<span class="string">"aspectX"</span>, <span class="number">1</span>);</div><div class="line">        intent.putExtra(<span class="string">"aspectY"</span>, <span class="number">1</span>);</div><div class="line">        <span class="comment">// outputX outputY 是裁剪图片宽高</span></div><div class="line">        intent.putExtra(<span class="string">"outputX"</span>, <span class="number">250</span>);</div><div class="line">        intent.putExtra(<span class="string">"outputY"</span>, <span class="number">250</span>);</div><div class="line">        intent.putExtra(<span class="string">"return-data"</span>, <span class="keyword">false</span>);</div><div class="line">        intent.putExtra(<span class="string">"noFaceDetection"</span>, <span class="keyword">false</span>);<span class="comment">//去除默认的人脸识别，否则和剪裁匡重叠</span></div><div class="line">        intent.putExtra(<span class="string">"outputFormat"</span>, <span class="string">"JPEG"</span>);</div><div class="line">        <span class="comment">//intent.putExtra("outputFormat", Bitmap.CompressFormat.JPEG.toString());// 图片格式</span></div><div class="line">        startActivityForResult(intent, RESULT_REQUEST_CODE);<span class="comment">//这里就将裁剪后的图片的Uri返回了</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>布局就不贴了，两个button，一个imageview。这代码没写权限管理的，所以要先赋好。</p>
<h5 id="拍照流程"><a href="#拍照流程" class="headerlink" title="拍照流程"></a>拍照流程</h5><p>给出Content Uri，调用相机应用程序，拍摄完成（在SD卡中能找到），再根据Content Uri，转入裁剪程序，裁剪有两个Uri，输入和输出，这里输入是Content Uri的，输出是File Uri的，输出必须是File Uri。</p>
<h5 id="相册流程"><a href="#相册流程" class="headerlink" title="相册流程"></a>相册流程</h5><p>给出Content Uri，调用相册程序，图片问题同样有分水岭问题（之前拍照不需要是因为图片路径是已知的，我们自己指定的），转化之后与拍照的流程一致。</p>
<p>以上所说流程均是Android 7.0</p>
<h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><h5 id="注意一："><a href="#注意一：" class="headerlink" title="注意一："></a>注意一：</h5><blockquote>
<p>仔细的看下这个方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//获取图片的真实路径，再构建Content Uri</span></div><div class="line">File imgUri = <span class="keyword">new</span> File(GetImagePath.getPath(getContext(), data.getData()));</div><div class="line">Uri dataUri = FileProvider.getUriForFile(getActivity(), <span class="string">"com.renwohua.conch.fileprovider"</span>, imgUri);</div><div class="line">startPhotoZoom(dataUri);</div></pre></td></tr></table></figure></p>
<p>来讲下原理：打开相机这个应用，开始拍照，然后自己提供一个储存的路径，并创建一个共享ContentUri，来将照片放在你这个ContentUri里面，这个东西只是一个虚拟的，拍的照片并没有保存在手机里面(lz注：应该是存的，不过控制权在我们这，且路径固定)，而相册不同，你是去访问相册里面的本身自带的照片，它本身已经存储了路径，你在<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Uri uriForFile = FileProvider.getUriForFile(getActivity(), <span class="string">"com.renwohua.conch.fileprovider"</span>, mGalleryFile); intent.putExtra(MediaStore.EXTRA_OUTPUT, uriForFile);</div></pre></td></tr></table></figure></p>
<p>这里定义了输出到这个ContentUri里面，但是从onActivityForResult中像相机一样使用<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Uri inputUri = FileProvider.getUriForFile(getActivity(), <span class="string">"com.renwohua.conch.fileprovider"</span>, mCameraFile);<span class="comment">//通过FileProvider创建一个content类型的Uri startPhotoZoom(inputUri);//设置输入类型`</span></div></pre></td></tr></table></figure></p>
<p>这种方式，获取的ContentUri里面并没有获取到相应的图片，只能通过data.getData()获取，因为这是相册本身自带的，它有自己的定义的输出目录，那就是data.getData(),同时，假如你的手机是7.0,你返回的Uri也面临着4.4图片分水岭的问题，所以也需要使用GetImagePath.getPath(getContext(), data.getData());去获取Uri，然后再通过FileProvider去做裁剪的动作,接下来就和上面的相机的裁剪一样的了。</p>
</blockquote>
<h5 id="注意二："><a href="#注意二：" class="headerlink" title="注意二："></a>注意二：</h5><blockquote>
<p>看我们前面的xml里面external-path,也就是外部路径,我们知道,现在的Android手机都把内置了储存空间,也是相当于一个SD卡,如果你有第二块SD呢,如三星的机型,如果传入的SD卡中的图片路径就会报错,why?因为我们我们前面写的external-path,表示的外部储存的路径,也就是你的机身储存那么路径又要怎么表示?前面我们翻译了文档,发现上面并没有说明这类情况,那么我们该怎么解决?看FileProvide的源码.<br><img src="/images/fileprovider/3.jpg"><br>发现里面除了文档上面说的那五类中路径没还有一个就是root-path,也就是整个手机的根路径,那就好办了<br><img src="/images/fileprovider/4.jpg"></p>
</blockquote>
<h4 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h4><p><a href="http://www.jianshu.com/p/ba57444a7e69" target="_blank" rel="external">Android 7.0 适配 FileProvider相机 相册 裁剪的使用</a><br><a href="http://yifeng.studio/2017/05/03/android-7-0-compat-fileprovider/" target="_blank" rel="external">关于 Android 7.0 适配中 FileProvider 部分的总结</a><br><a href="https://inthecheesefactory.com/blog/how-to-share-access-to-file-with-fileprovider-on-android-nougat/en" target="_blank" rel="external">file:// scheme is now not allowed to be attached with Intent on targetSdkVersion 24 (Android Nougat). And here is the solution.</a><br><a href="http://www.cnblogs.com/liushilin/p/6602364.html" target="_blank" rel="external">Android 7.0 调取系统相机崩溃解决android.os.FileUriExposedException</a></p>
]]></content>
      
        <categories>
            
            <category> 2017-05 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> android </tag>
            
            <tag> FileProvider </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[IntelliJ IDEA下使用默认Spring MVC框架运行失败的解决方案]]></title>
      <url>http://wenjiehe.com/2017/04/28/2017-04-28-idea-spring-demo-solutions/</url>
      <content type="html"><![CDATA[<p>IntelliJ IDEA下导入Spring MVC框架，直接运行失败，下面说明一下具体的解决步骤。<a id="more"></a></p>
<p>使用IDEA，直接导入Spring MVC框架</p>
<img src="/images/idea-spring-demo/1.jpg"> 
<p>目录结构：<br><img src="/images/idea-spring-demo/2.jpg"> </p>
<p>web.xml<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee"</span></span></div><div class="line">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></div><div class="line">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"</span></div><div class="line">         <span class="attr">version</span>=<span class="string">"3.1"</span>&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>/WEB-INF/applicationContext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">listener</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcher<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcher<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.do<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>dispatcher-servlet.xml<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></div><div class="line">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span> <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></div><div class="line">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd"</span>&gt;</div><div class="line">    <span class="comment">&lt;!-- 使用注解的包，包括子集 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.wenjiehe.hello"</span>/&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- 视图解析器 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"viewResolver"</span></span></div><div class="line">          <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/jsp/"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>在WEB-INF/jsp目录下创建hello.jsp<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">contentType</span>=<span class="string">"text/html;charset=UTF-8"</span> <span class="attr">language</span>=<span class="string">"java"</span> %&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">$&#123;message&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>src目录下创建com.wenjiehe.hello.hello.java文件<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Controller</span></div><div class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/hello"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">hello</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@RequestMapping</span>(method = RequestMethod.GET )</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">helloWorld</span><span class="params">(Model model)</span></span>&#123;</div><div class="line">        model.addAttribute(<span class="string">"message"</span>, <span class="string">"StringMvc你好啊！"</span>);</div><div class="line">        <span class="keyword">return</span> <span class="string">"hello"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>配置好tomcat即可运行，然后遇到一个问题：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">28-Apr-2017 20:24:15.997 SEVERE [RMI TCP Connection(3)-127.0.0.1] org.apache.catalina.core.StandardContext.startInternal One or more listeners failed to start. Full details will be found in the appropriate container log file</div><div class="line"></div><div class="line">28-Apr-2017 20:24:15.998 SEVERE [RMI TCP Connection(3)-127.0.0.1] org.apache.catalina.core.StandardContext.startInternal Context [] startup failed due to previous errors</div></pre></td></tr></table></figure></p>
<p>这个问题可能出在lib加载的问题，解决办法是把lib文件夹放入WEB-INF目录下，同时添加为library。<br>问题解决的链接：<a href="https://segmentfault.com/q/1010000004286568" target="_blank" rel="external">Intellij IDEA 15创建的spring mvc项目无法运行。</a>  </p>
<p>这是第一个问题。第二个问题发现重新运行后的程序老是不能更新，找了下解决办法：<a href="http://ljhzzyx.blog.163.com/blog/static/383803122014616959143/" target="_blank" rel="external">intellij idea让资源文件自动更新 </a></p>
<img src="/images/idea-spring-demo/3.jpg"> 
<p>开始项目中没有 on frame deactivation 选项，在工程名上右击选择Open Module Settings，在Artifacts添加war exploded<br><img src="/images/idea-spring-demo/4.jpg"> </p>
<p>至此就可以运行了。</p>
<img src="/images/idea-spring-demo/5.jpg"> 
]]></content>
      
        <categories>
            
            <category> 2017-04 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Spring MVC </tag>
            
            <tag> IntelliJ </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Relative Ranks问题的两种实现]]></title>
      <url>http://wenjiehe.com/2017/02/19/2017-02-19-relative-ranks/</url>
      <content type="html"><![CDATA[<p>本文的题目是一道基础题（506题），基于排序问题，借此熟悉一下快排和冒泡及其使用，同时也能很明显地看出快排的优势。<a id="more"></a></p>
<h4 id="题目内容"><a href="#题目内容" class="headerlink" title="题目内容"></a>题目内容</h4><p>Description:</p>
<blockquote>
<p>Given scores of N athletes, find their relative ranks and the people with the top three highest scores, who will be awarded medals: “Gold Medal”, “Silver Medal” and “Bronze Medal”.</p>
</blockquote>
<p>Example:</p>
<blockquote>
<p>Input: [5, 4, 3, 2, 1]<br>Output: [“Gold Medal”, “Silver Medal”, “Bronze Medal”, “4”, “5”]<br>Explanation: The first three athletes got the top three highest scores, so they got “Gold Medal”, “Silver Medal” and “Bronze Medal”.<br>For the left two athletes, you just need to output their relative ranks according to their scores.</p>
</blockquote>
<h4 id="我的思路"><a href="#我的思路" class="headerlink" title="我的思路"></a>我的思路</h4><p>此问题基本就是个排序问题，当不能光排序，最后还需要给他们按未排序的数组分配名次。所以需要一个数组来建立<strong>排序后的位置与排序前的位置关系</strong>。即排序后的位置与原数组位置的信息丢失了，因此我们在排序的同时就需要保留这份信息。</p>
<h4 id="冒泡排序实现"><a href="#冒泡排序实现" class="headerlink" title="冒泡排序实现"></a>冒泡排序实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">  String[] result = <span class="keyword">new</span> String[nums.length]; <span class="comment">//存储结果的字符串数组</span></div><div class="line">  <span class="keyword">int</span> [] numsTmp = <span class="keyword">new</span> <span class="keyword">int</span>[nums.length]; <span class="comment">//因为排序直接对原来的数组操作，最后需要对排序后的数组分配奖牌及名次。如下标0，对应的值就是排序后nums[0]原来的位置</span></div><div class="line"></div><div class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nums.length;i++) &#123;<span class="comment">//初始化次序</span></div><div class="line">      numsTmp[i] = i;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">int</span> temp = <span class="number">0</span>;</div><div class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nums.length;i++)&#123;<span class="comment">//冒泡排序</span></div><div class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;nums.length-i-<span class="number">1</span>;j++)&#123;</div><div class="line">          <span class="keyword">if</span>(nums[j+<span class="number">1</span>]&gt;nums[j])&#123;</div><div class="line">              temp = nums[j];<span class="comment">//冒泡中的交换</span></div><div class="line">              nums[j] = nums[j+<span class="number">1</span>];</div><div class="line">              nums[j+<span class="number">1</span>] = temp;</div><div class="line">					</div><div class="line">              temp = numsTmp[j];<span class="comment">//因为nums中交换了，对应地，numsTmp就要交换。</span></div><div class="line">              numsTmp[j] = numsTmp[j+<span class="number">1</span>] ;<span class="comment">//注意，这里交换的应该是numsTmp中的值</span></div><div class="line">              numsTmp[j+<span class="number">1</span>] = temp;</div><div class="line">          &#125;</div><div class="line">      &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  </div><div class="line"></div><div class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;numsTmp.length;i++)&#123;<span class="comment">//名次是从1开始的</span></div><div class="line">      result[numsTmp[i]] = i+<span class="number">1</span>+<span class="string">""</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">if</span>(result.length==<span class="number">1</span>)&#123;<span class="comment">//这里要注意，是不是可能人数少于3人</span></div><div class="line">      result[numsTmp[<span class="number">0</span>]] = <span class="string">"Gold Medal"</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">else</span> <span class="keyword">if</span>(result.length==<span class="number">2</span>)&#123;</div><div class="line">result[numsTmp[<span class="number">0</span>]] = <span class="string">"Gold Medal"</span>;</div><div class="line">      result[numsTmp[<span class="number">1</span>]] = <span class="string">"Silver Medal"</span>;</div><div class="line">  &#125;<span class="keyword">else</span>&#123;</div><div class="line">      result[numsTmp[<span class="number">0</span>]] = <span class="string">"Gold Medal"</span>;			</div><div class="line">      result[numsTmp[<span class="number">1</span>]] = <span class="string">"Silver Medal"</span>;</div><div class="line">      result[numsTmp[<span class="number">2</span>]] = <span class="string">"Bronze Medal"</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">return</span> result;</div></pre></td></tr></table></figure>
<h4 id="快速排序实现"><a href="#快速排序实现" class="headerlink" title="快速排序实现"></a>快速排序实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> String[] findRelativeRanks(<span class="keyword">int</span>[] nums) &#123;</div><div class="line">        <span class="keyword">int</span>[] numsTmp = <span class="keyword">new</span> <span class="keyword">int</span>[nums.length];</div><div class="line">        String[] result = <span class="keyword">new</span> String[nums.length];</div><div class="line">        </div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;numsTmp.length;i++) &#123;</div><div class="line">            numsTmp[i] = i;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        quickSort(nums,numsTmp,<span class="number">0</span>,nums.length-<span class="number">1</span>);<span class="comment">//快排</span></div><div class="line">        </div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;numsTmp.length;i++)&#123;<span class="comment">//同冒泡</span></div><div class="line">            result[numsTmp[i]] = i+<span class="number">1</span>+<span class="string">""</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span>(result.length==<span class="number">1</span>)&#123;</div><div class="line">            result[numsTmp[<span class="number">0</span>]] = <span class="string">"Gold Medal"</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(result.length==<span class="number">2</span>)&#123;</div><div class="line">            result[numsTmp[<span class="number">0</span>]] = <span class="string">"Gold Medal"</span>;			</div><div class="line">            result[numsTmp[<span class="number">1</span>]] = <span class="string">"Silver Medal"</span>;</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            result[numsTmp[<span class="number">0</span>]] = <span class="string">"Gold Medal"</span>;			</div><div class="line">            result[numsTmp[<span class="number">1</span>]] = <span class="string">"Silver Medal"</span>;</div><div class="line">            result[numsTmp[<span class="number">2</span>]] = <span class="string">"Bronze Medal"</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">quickSort</span><span class="params">(<span class="keyword">int</span>[] nums,<span class="keyword">int</span> numsTmp[],<span class="keyword">int</span> start,<span class="keyword">int</span> end)</span></span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">if</span>(start&lt;end)&#123;</div><div class="line">		<span class="keyword">int</span> temp = nums[start];</div><div class="line">		<span class="keyword">int</span> cc = numsTmp[start];<span class="comment">//记录下起始位置中的值</span></div><div class="line">		<span class="keyword">int</span> startTmp= start,endTmp = end;</div><div class="line">		<span class="keyword">while</span>(start&lt;end) &#123;</div><div class="line">			<span class="keyword">while</span> (start &lt; end &amp;&amp; nums[end] &lt; temp) &#123;</div><div class="line">				--end;</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">if</span>(start &lt; end) &#123;</div><div class="line">			    <span class="comment">//int Tmp = 0;</span></div><div class="line">			    <span class="comment">//Tmp = numsTmp[start];</span></div><div class="line">			    numsTmp[start] = numsTmp[end];<span class="comment">//把nums中更换时，同时也要更换numsTmp中</span></div><div class="line">			    <span class="comment">//numsTmp[end] = Tmp;</span></div><div class="line">				nums[start++] = nums[end];</div><div class="line">			&#125;</div><div class="line"></div><div class="line">			<span class="keyword">while</span> (start &lt; end &amp;&amp; nums[start] &gt;= temp) &#123;</div><div class="line">				++start;</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">if</span>(start &lt; end) &#123;</div><div class="line">			    numsTmp[end] = numsTmp[start];<span class="comment">//把nums中更换时，同时也要更换numsTmp中</span></div><div class="line">                nums[end--] = nums[start];</div><div class="line">            &#125;</div><div class="line"></div><div class="line">		&#125;</div><div class="line">		nums[start] = temp;<span class="comment">//把最开始的值存在start位置，然后递归</span></div><div class="line">		numsTmp[start] = cc;<span class="comment">//把numsTmp的目前start在的位置赋值成初始值，对应于快排算法</span></div><div class="line">		quickSort(nums,numsTmp,startTmp,start-<span class="number">1</span>);</div><div class="line">		quickSort(nums,numsTmp,start+<span class="number">1</span>,endTmp);</div><div class="line">	&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>再贴一张快排思路图，来自<a href="http://blog.csdn.net/pzhtpf/article/details/7560294" target="_blank" rel="external">pzhtpf</a>，但除了这幅图其他的讲的过于混乱。需要完整看快排算法可以看参考链接。</p>
<img src="/images/relative-ranks/quick_sort_example.jpg"> 
<h4 id="实现时遇到的问题"><a href="#实现时遇到的问题" class="headerlink" title="实现时遇到的问题"></a>实现时遇到的问题</h4><p>1.排序算法不够熟练，所以一开始用冒泡做。<br>2.如何存储关系不明确，也就是思路不够明晰，其实只用把numsTmp中的内容做一个交换（冒泡）或者直接给新位置赋上旧位置的值（快排）即可。</p>
<h4 id="两种排序的运行时间对比"><a href="#两种排序的运行时间对比" class="headerlink" title="两种排序的运行时间对比"></a>两种排序的运行时间对比</h4><p>其实差距还是很明显的，快排大概能击败95%，冒泡则只有20%不到。</p>
<p>冒泡：<br><img src="/images/relative-ranks/bubble_sort.jpg"> </p>
<p>快排：<br><img src="/images/relative-ranks/quick_sort.jpg"> </p>
<h4 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h4><p>原题链接：<a href="https://leetcode.com/problems/relative-ranks/?tab=Description" target="_blank" rel="external">relative-ranks</a><br>快排实现：<a href="http://blog.csdn.net/morewindows/article/details/6684558" target="_blank" rel="external">白话经典算法系列之六 快速排序 快速搞定</a></p>
]]></content>
      
        <categories>
            
            <category> 2017-02 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> 冒泡排序 </tag>
            
            <tag> 快速排序 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[研究生一年级寒假杂记]]></title>
      <url>http://wenjiehe.com/2017/02/13/2017-02-13-first-year-gradute-winter-vacation-life/</url>
      <content type="html"><![CDATA[<p>这篇文章讲讲研一的寒假在家做了哪些事及发生的改变。<a id="more"></a></p>
<p>今年回家特别早，几乎一考完试就回家了，应该是在外面呆久了，倍感离家近时对家的怀念。</p>
<p>这个假期过得还算充实，每天睡觉的量绝对是为接下来的一年养足了精神，每天睡觉平均十小时，每天都觉得特别困，想睡觉。除了最后来学校的那个晚上没睡好，其他时间基本一沾枕头就睡着了，再睡到自然醒，去吃个饭。今年的天气还是特别好的，饭后晒晒太阳，特别安逸舒畅，忘了许多烦恼。</p>
<p>年前把《一个叫欧维的男人决定去死》看完了，小说的思路还是比较清晰，先讲欧维决定去死，然后慢慢穿插着欧维每次想去死的时候都被邻居打扰，同时讲述着欧维的经历，从不同的方面，小时候的，父母带来的，邻居们的，妻子带来的，妻子遇上车祸给生活带来的转变等等方面，我们慢慢地认识到欧维是一个怎么样的人。其实感觉我也可能是个欧维，有时候很偏执，冥顽不灵，表面看上去很冷漠，但是仍然会骂着喊着去帮一些忙。其实每种性格的养成有小时候的不知哪来的缘由，还有一些从小到大生活的经历相关，把人变得开朗，把人变得内向，把人变得圆润，把人变得有棱角。欧维的性格在遇到妻子前后，妻子遇到车祸流畅残疾前后，妻子离世前后发生了巨大的改变，可以说妻子的离世直接导致了欧维的崩溃，在经历遇到妻子之后，可以说欧维的脾气发生了一些好转（有点像谢耳朵？），但是和邻居之间等等并没有太妥协原则，但是在妻子遇到车祸之后，欧维不仅失去了未出生的孩子，妻子也残疾了，可以说给生活带来了比较大的打击，也为妻子的死埋下了隐患。妻子死后，欧维经受了巨大的打击，半年后，欧维决定也陪妻子一起死去，但是新来的邻居，不遵守纪律的居委会成员，朋友的帮忙，欧维一次次被打断，最后反而与邻居伴侣，度过了人生最后几年，这也可能是妻子想看到的吧。</p>
<blockquote>
<p>生活没有想象的那么好 也没有想象的那么糟<br>脆弱和坚强都出乎意料<br>有时候会脆弱得因为一句话就满面泪流<br>有时候会发现咬着牙走了很远很久</p>
</blockquote>
<p>《天文爱好者》也到了，人生还是需要有点追寻的。顺便也在常州买了个二手的天文望远镜，Gskyer80900，卖家还是不错的，最后1000的原价600成交，除了目镜的管子有点问题，拿来看月亮效果还不错，看了下木星，完全是白色的亮斑，换了低倍也是一样，就看到了四颗伽利略卫星，不过还是很满意的了~希望接下来能争取看清行星表面。</p>
<p>尝试开了一下午的车，开的慌慌的，开车时思路要清晰一点，倒车有哪些步骤，转向呢？一步一步知道该怎么做。最重要的是，要相信自己能开好，自己和其他人没什么区别，你不会开车只是因为开得少，而不能把你开得不好归结于天赋的缺失。同时也是，当有一个人新开始掌握一件东西时，老手也需要鼓励鼓励，培养起新手的信心，这个对于孩子尤其重要，信心的缺失会带来性格的极大转变。</p>
<p>寒假后期，猛学了一段时间的Java Web，说实话我是很怕这个的，感觉东西，多杂，各种框架，各种结构，感觉自己老是搞不定，心里很虚。因为之前已经经过了好几轮预热，对Web也有些印象，所以做起来容易把东西联系在一起，比较好接受，多而杂的Web需要经常去巩固呢。</p>
<p>开学后慢慢要往公司跑了，可能会比较忙，但我希望能不忘闲时的心态，要淡定，学会苦中作乐，宽容理解别人，爱我爱的人，而不是留给以一句忙来忽略最应该珍惜的人。</p>
<p> <strong>不忘初心，有始有终。</strong></p>
]]></content>
      
        <categories>
            
            <category> 2017-02 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 杂记 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[基于Hexo的博客同步中的一些问题]]></title>
      <url>http://wenjiehe.com/2017/01/30/2017-01-30-hexo-theme-sync/</url>
      <content type="html"><![CDATA[<p>这篇文章讲讲在我的Octopress博客更换成基于Hexo的博客后，为了在多台电脑能够同步中遇到的问题。<a id="more"></a></p>
<p>我基于<a href="https://www.zhihu.com/question/21193762" target="_blank" rel="external">这个回答</a>来解决这个问题的。问题主要出在theme上，由于NexT主题引自第三方，所以这就牵扯到git中的submodule问题了。想偷懒把不引入，但是好像不行，于是按以下思路进行解决：clone NexT官方的github到自己的仓库，然后引入子模块，我这边不知道为什么有“<a href="https://my.oschina.net/jerikc/blog/513039" target="_blank" rel="external">already exists in the index</a>”的问题，执行如下命令：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git rm -r --cached theme/next</div></pre></td></tr></table></figure></p>
<p>由于我是已经配置好了自己的NexT，为了不让它遗失，我先把它剪贴出来，再添加submodlue：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git submodule add git@github.com:starsight/hexo-theme-next.git themes/next</div></pre></td></tr></table></figure></p>
<p>然后再把自己的配置覆盖fork下来的NexT仓库。<br>我们先要push submodule，在theme/next目录下依次执行：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">git add .</div><div class="line">git commit -m "next settings in fork next rep"</div><div class="line">git push origin master //这是提交到fork后主题的仓库</div></pre></td></tr></table></figure></p>
<p>这样，是提交到starsight/hexo-theme-next仓库。然后我们再更新<a href="https://github.com/starsight/starsight.github.io" target="_blank" rel="external">starsight.github.io</a>仓库：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">cd ../../ //切到仓库的根目录</div><div class="line">git add .</div><div class="line">git commit -m "update next settings in blog sources branch"</div><div class="line">git push origin hexo //注意hexo分支</div></pre></td></tr></table></figure></p>
<p>以后写文章，只需要在根目录下（hexo分支）进行git add,commit,push(hexo)操作，例如：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">git add .</div><div class="line">git commit -m"new post hexo theme sync solution"</div><div class="line">git push origin hexo</div></pre></td></tr></table></figure></p>
<p>然后再更新master分支，即对外显示的html部分：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">//hexo s -g</div><div class="line">hexo d -g  // g为generate 生成，s为本地预览，d为deploy 部署到远程分支</div></pre></td></tr></table></figure></p>
<p>接下来为比较完整的在另一台电脑上的操作过程：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">git clone --recursive git@github.com:starsight/starsight.github.io.git //clone 主仓库</div><div class="line">cd starsight.github.io/</div><div class="line">git checkout hexo //切换到hexo，以后基本都是基于此分支，master分支用hexo -d</div><div class="line">cd themes/next/</div><div class="line">git submodule init</div><div class="line">git submodule update //获取我的NexT主题的配置</div><div class="line">//接下来的任务主要是配置环境，nodejs安装，hexo等等。以下安装可能不全面</div><div class="line">//先切换到仓库根目录</div><div class="line">npm install -g hexo</div><div class="line">npm install hexo-cli -g</div><div class="line">npm install hexo --save</div><div class="line">npm install hexo-server --save</div><div class="line">npm install hexo-deployer-git --save</div><div class="line">npm install</div></pre></td></tr></table></figure></p>
<p>参考文章：<br><a href="http://devtian.me/2015/03/17/blog-sync-solution/" target="_blank" rel="external">关于博客同步的解决办法</a><br><a href="https://cragod.github.io/2016/GitSubmodule/" target="_blank" rel="external">手动配置Git的Submodule</a><br><a href="https://segmentfault.com/a/1190000003076028" target="_blank" rel="external">使用Git Submodule管理子模块</a></p>
]]></content>
      
        <categories>
            
            <category> 2017-01 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Hexo同步 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[行迹V0.6版本概述总结]]></title>
      <url>http://wenjiehe.com/2016/10/15/2016-10-15-xingji-2/</url>
      <content type="html"><![CDATA[<p>这篇文章讲讲目前行迹版本（v0.6）的一些总结。最开始的版本，对于签到信息等信息类的管理展示用的是开源库cardslib，但是我用的比较简单，开始不太清楚ListView和RecyclerView的使用方式，在做cardslib的refresh和reload时，遇到了很多问题，这一块还没有彻底解决，后来选择了一个国人的开源库canrefresh算是解决了问题，应用的一个问题在于很少使用一些优秀的开源库，图片加载的，json解析的等，开始想着先用最基础（抠脚）的方式把基本功能解决，再慢慢上复杂的东西。当然这么想没错的，但是可能把起点定的太低了，总想着几天解决一个功能，其实还是需要把基础抓好，慢慢完善的，当然现在时间过于碎片了，也没办法。<a id="more"></a></p>
<p>现在0.6版本界面布局采用左滑拉出菜单栏，菜单功能目前有：“签到”，“历史签到”，“附近动态”，“设置”和“退出应用”五个部分，头像还可以点击进入“我的动态”，其中有个人资料设置和所有个人的动态展示。签到采用Fragment，直接在主界面中显示一个百度地图的控件，在地图中展示已经签到的位置（SignFragment），新增一个签到有两种方式：文字签到和带图片签到（SignActivity），现在签到展示栏对于图片缓存和压缩没有处理，所以上传大图片的话估计会直接死机……图片选择这边用的开源库，但是做了好久，然而发现其实可以直接使用图片/拍照进行选择，没有必要非得做在一个界面，而且在头像上传的位置也就是这么实现的，一个APP两种图片选择逻辑，虽然说都是常见的，但还是有点像一个堆砌品。</p>
<p>历史签到（MyHistorySignActivity）里面比较复杂的事就是refresh和reload了，reload每次加载一批数据，具体实现是每次查询一周内的签到数据（一般不差过10次），每load一次就往上增加一周刷新。加载的形式分为两种，带图片和不带图片，在RecyclerView中，我们需要在onBindViewHolder函数中完成图片的加载，特别注意的是，如果我们打算采用默认图片不设置其他图片，也不能在xml文件中直接定义默认图片，要在onBindViewHolder函数中，选择设置图片的显示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">if()</div><div class="line">&#123;</div><div class="line">设置图片</div><div class="line">&#125;else&#123;</div><div class="line">设置默认图片</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>附近的动态（NearbyMomentsActivity）直接查询在周围一定范围内的允许共享的签到信息，这里有些问题：先把周围签到信息拉回本地再去查询该记录的拥有者是否愿意共享状态；而实际应该是不允许共享的签到信息直接在服务器端就彻底对其他人隐藏了，由于使用现成的后端服务，这也是其中的不足之处了。另外，这页也可以喜欢别的签到信息，同时会在本人和对方的动态加入一条索引，增加到签到信息的喜欢人列表“liker”中。</p>
<p>设置（EditSettingActivity）主要就是否允许共享签到信息和在地图中显示签到信息：“开启后，行迹将会把你的签到信息推送给签到位置附近的人，你也可以查看当前位置附近其他人的签到信息。”和“开启此功能前，需允许行迹共享你的签到信息”。这块可以再增加用户反馈的功能。</p>
<p>左侧头像点击进去就是个人的动态，目前包括签到信息，喜欢和被喜欢的信息，在头像位置进入个人资料设定（EditUserInfoActivity）就可以编辑个人资料。<br>以上就是大体的从界面入手简析了工程内容，当然应用的注册登录这块做的时间已经比较长了，留到以后有空简单说一下。</p>
<p>下载链接：<a href="http://123.206.214.17/xingji/xingji.apk" target="_blank" rel="external">最新版行迹</a>  </p>
<p>扫描二维码： </p>
<img src="/images/xingji-2/1.png"> ]]></content>
      
        <categories>
            
            <category> 2016-10 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 行迹 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[行迹开篇]]></title>
      <url>http://wenjiehe.com/2016/08/18/2016-08-18-xingji-1/</url>
      <content type="html"><![CDATA[<p>毕业前开始写一款应用，经过一次大的重构，现在这个应用已经稍微像点样子了，准备开始一边写技术总结，一边做下去。<a id="more"></a></p>
<p>因为开发应用的时候，android基本玩的差不多了，算是边学边开发，所以很多架构比较散，不最优，只能慢慢地一步一不提升了。我们总是由弱到强的嘛！</p>
<p>说正题，这款应用我很久之前就想做了，但是一直犹豫以后做的方向，是嵌入式还是android，现在基本选择android方向了，除非过两年android衰弱的不行，VR/物联网崛起那就再看咯。应用的名字叫“行迹”，主要是针对一些爱四处旅行的人记录下自己的脚步，算是一个总结和念想，有点类似于qq空间或者朋友圈的签到，不过这个更多的是给自己看的，而不是一种“炫耀”的签到（当然后期有能力的话还是会做社交类的），同时这个更加基于位置而签到，重点在于记录；不像上述两个功能，重点在于分享社交。</p>
<p>第一版应用的服务器和客户端都是自己亲自来做，因为没有做过网络应用，所以想尝试下，但是两个都不擅长，于是慢慢地一点点摸索，客户端全是发送GET请求进行交互，JSON数据也全是自己手动拼凑……不过好歹也是凑出来了。基本的签到功能，历史数据删查功能，用户的登录，数据同步都有了样子，但是看上去架构太差，只是为了满足功能的东拼西凑，数据的安全、后续升级考虑的较少，而且界面太丑，只能算个学习作品，自己会什么就做成什么样……</p>
<p>以下是第一版的截图：</p>
<img src="/images/xingji-1/1.jpg">
<img src="/images/xingji-1/2.jpg">
<img src="/images/xingji-1/3.jpg">
<img src="/images/xingji-1/4.jpg">
<p>第二版后端用了leancloud和腾讯云的TAB服务，后端要考虑的东西大大减少，需要学习一些接口操作等，算是方便了不少。客户端的风格采用侧滑式，照着手机上几款相似的应用（网易云音乐，bilibili，即刻，掘金等）慢慢设计客户端的UI和交互，尽力去实现，实在不能就找开源库或者可替代方案了。</p>
<p>这是第二版的截图：</p>
<img src="/images/xingji-1/5.jpg">
<img src="/images/xingji-1/6.jpg">
<img src="/images/xingji-1/7.jpg">
<p>好了，第二篇开始具体讲重构过程中的具体技术问题，目前没能力谈架构，先做好技术细节，慢慢总结，复杂的问题以后也会慢慢遇到和解决的。</p>
]]></content>
      
        <categories>
            
            <category> 2016-08 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 行迹 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Raspberry Pi 3 opencv+python的人脸识别]]></title>
      <url>http://wenjiehe.com/2016/05/01/2016-05-01-raspberry-identify-face/</url>
      <content type="html"><![CDATA[<p>上次安装了opencv库，这次我们来使用一下。</p>
<a id="more"></a>
<p>安装PIL库</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo pip install pil</div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line">xx.py:</div><div class="line"></div><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment">#coding=utf-8</span></div><div class="line"><span class="keyword">import</span> os</div><div class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image, ImageDraw</div><div class="line"><span class="keyword">import</span> cv</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">detect_object</span><span class="params">(image)</span>:</span></div><div class="line">    <span class="string">'''检测图片，获取人脸在图片中的坐标'''</span></div><div class="line">    grayscale = cv.CreateImage((image.width, image.height), <span class="number">8</span>, <span class="number">1</span>)</div><div class="line">    cv.CvtColor(image, grayscale, cv.CV_BGR2GRAY)</div><div class="line"></div><div class="line">    cascade = cv.Load(<span class="string">"/usr/local/opencv-2.4.9/data/haarcascades/haarcascade_frontalface_alt_tree.xml"</span>)</div><div class="line">    rect = cv.HaarDetectObjects(grayscale, cascade, cv.CreateMemStorage(), <span class="number">1.1</span>, <span class="number">2</span>,</div><div class="line">        cv.CV_HAAR_DO_CANNY_PRUNING, (<span class="number">20</span>,<span class="number">20</span>))</div><div class="line"></div><div class="line">    result = []</div><div class="line">    <span class="keyword">for</span> r <span class="keyword">in</span> rect:</div><div class="line">        result.append((r[<span class="number">0</span>][<span class="number">0</span>], r[<span class="number">0</span>][<span class="number">1</span>], r[<span class="number">0</span>][<span class="number">0</span>]+r[<span class="number">0</span>][<span class="number">2</span>], r[<span class="number">0</span>][<span class="number">1</span>]+r[<span class="number">0</span>][<span class="number">3</span>]))</div><div class="line"></div><div class="line">    <span class="keyword">return</span> result</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">process</span><span class="params">(infile)</span>:</span></div><div class="line">    <span class="string">'''在原图上框出头像并且截取每个头像到单独文件夹'''</span></div><div class="line">    image = cv.LoadImage(infile);</div><div class="line">    <span class="keyword">if</span> image:</div><div class="line">        faces = detect_object(image)</div><div class="line"></div><div class="line">    im = Image.open(infile)</div><div class="line">    path = os.path.abspath(infile)</div><div class="line">    save_path = os.path.splitext(path)[<span class="number">0</span>]+<span class="string">"_face"</span></div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        os.mkdir(save_path)</div><div class="line">    <span class="keyword">except</span>:</div><div class="line">        <span class="keyword">pass</span></div><div class="line">    <span class="keyword">if</span> faces:</div><div class="line">        draw = ImageDraw.Draw(im)</div><div class="line">        count = <span class="number">0</span></div><div class="line">        <span class="keyword">for</span> f <span class="keyword">in</span> faces:</div><div class="line">            count += <span class="number">1</span></div><div class="line">            draw.rectangle(f, outline=(<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>))</div><div class="line">            a = im.crop(f)</div><div class="line">            file_name = os.path.join(save_path,str(count)+<span class="string">".jpg"</span>)</div><div class="line">     <span class="comment">#       print file_name</span></div><div class="line">            a.save(file_name)</div><div class="line"></div><div class="line">        drow_save_path = os.path.join(save_path,<span class="string">"out.jpg"</span>)</div><div class="line">        im.save(drow_save_path, <span class="string">"JPEG"</span>, quality=<span class="number">80</span>)</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">print</span> <span class="string">"Error: cannot detect faces on %s"</span> % infile</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</div><div class="line">    process(<span class="string">"kobe.jpg"</span>)</div></pre></td></tr></table></figure>
<p>接下来只要运行python xx.py</p>
<p>过一会，如果图片内有人的话生成一个文件夹，里面有一张人脸的截图和一张人脸的标识图。</p>
<p>以下为示例：</p>
<img src="/images/face/1.jpg">
<img src="/images/face/2.jpg">
<img src="/images/face/3.jpg">
<p>接下来用一下摄像头：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install fswebcam </div><div class="line">sudo fswebcam --device /dev/video0  a.jpg</div></pre></td></tr></table></figure>
<p>在 process(“kobe.jpg”) 前面加一句:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">os.system(&quot;fswebcam --device /dev/video0 /home/pi/Desktop/kobe.jpg&quot;)</div></pre></td></tr></table></figure>
<p>看一下效果：</p>
<img src="/images/face/4.jpg">
<img src="/images/face/5.jpg">
<p>光线不好还是能认出来，说明opencv自带的分类器算开源里面不错的了~</p>
<p>参考:<br><a href="http://bbs.ickey.cn/group-topic-id-67165.html" target="_blank" rel="external">Tigerboard开发板试用体验 python+opencv的人脸识别</a><br><a href="http://blog.csdn.net/u010873775/article/details/50615834" target="_blank" rel="external">NanoPi2试用体验 简单人脸识别-结项</a></p>
]]></content>
      
        <categories>
            
            <category> 2016-05 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 树莓派 </tag>
            
            <tag> opencv </tag>
            
            <tag> python </tag>
            
            <tag> 人脸识别 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Raspberry Pi 3 编译opencv]]></title>
      <url>http://wenjiehe.com/2016/04/30/2016-04-30-raspberry-opencv-install/</url>
      <content type="html"><![CDATA[<p>OpenCV的全称是：Open Source Computer Vision Library。OpenCV是一个基于（开源）发行的跨平台计算机视觉库，可以运行在Linux、Windows和Mac OS操作系统上。它轻量级而且高效——由一系列C函数和少量C++类构成，同时提供了Python、Ruby、MATLAB等语言的接口，实现了图像处理和计算机视觉方面的很多通用算法。</p>
<p>需要完成此次的项目，离不开opencv的支持，接下来我们就在树莓派上安装opencv。<br><a id="more"></a></p>
<p>安装OpenCV的依赖包：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install libqt4-dev libvtk5-qt4-dev</div></pre></td></tr></table></figure>
<p>接下来需要从OpenCV官方网站：<a href="http://opencv.org" target="_blank" rel="external">http://opencv.org</a> 下载Linux版本的OpenCV的源代码：</p>
<img src="/images/opencv-install/1.jpg">
<p>我选择Linux平台下的2.4.9版本的源码包，将压缩包解压到/usr/local目录下。</p>
<p>进入opencv-2.4.9目录，新建一个build目录： </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo mkdir build</div></pre></td></tr></table></figure>
<p>先安装 cmake  </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install cmake</div></pre></td></tr></table></figure>
<p>进入build目录，利用下面的cmake命令进行编译设置：</p>
<p>注意下python部分：</p>
<img src="/images/opencv-install/2.jpg">
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cmake -D CMAKE_BUILD_TYPE=RELEASE -D ..</div></pre></td></tr></table></figure>
<p>等待检测和设置完成,就可以开始编译了:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">sudo make</div><div class="line">sudo make install</div><div class="line">#更新搜索动态链接库</div><div class="line">sudo ldconfig</div></pre></td></tr></table></figure>
<img src="/images/opencv-install/3.jpg">
<img src="/images/opencv-install/4.jpg">
<p>在python环境下执行</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">import cv</div></pre></td></tr></table></figure>
<p>没有报错则安装成功~</p>
<p>参考:<br><a href="http://jjliu.blog.ustc.edu.cn/198/" target="_blank" rel="external">GoBian安装OpenCV2.4.10</a><br><a href="http://blog.csdn.net/xukai871105/article/details/40988101" target="_blank" rel="external">树莓派学习笔记—— 源代码方式安装opencv </a>  </p>
]]></content>
      
        <categories>
            
            <category> 2016-04 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 树莓派 </tag>
            
            <tag> 编译opencv </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Raspberry Pi 3 使用owncloud云服务]]></title>
      <url>http://wenjiehe.com/2016/04/29/2016-04-29-raspberry-owncloud/</url>
      <content type="html"><![CDATA[<p>我们将要搭建自己的云系统平台，更精确的说是一个云存储系统，正如上面的产品所提供的功能。我们将使用开源软件ownCloud来搭建自己的私有云。ownCloud 起源于一个叫The KDE 云计算项目，现在已经适用于大多主流平台，它最早是KED的开发者Frank Karlitschek 创建的，现在由一个ownCloud team共同开发。</p>
<p>首先介绍一下ownCloud：<br>简单来说就是一个基于PHP的自建网盘。基本上是私人使用，没有用户注册功能，但是有用户添加功能，你可以无限制地添加用户，OwnCloud还提供了不少的免费应用，这些应用可以让你更好观看视频、倾听音乐等。<br><a id="more"></a></p>
<p>ownCloud 内核是用PHP5写的，支持SQLite、MySQL、Oracle以及PostgreSQL等数据库。为了简单，我们将用MySQL数据库。在你的Linux系统下你需要安装以下软件：</p>
<p>PHP 安装包：php5, php5-gd, php-xml- parser,php5-intl<br>数据库驱动：php5-mysql（如果你使用其他数据库，需要安装相应的数据库以及驱动）<br>Curl 安装包：curl, libcurl3, php5-curl<br>SMB 客户端：smbclient （这个用来挂载Windows共享文件夹的）<br>Web 服务器：apache2  </p>
<p>####一键安装：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install apache2 php5 php5-gd php-xml-parser php5-intl php5-sqlite php5-mysql smbclient curl libcurl3 php5-curl mysql-server</div></pre></td></tr></table></figure></p>
<p>从 <a href="https://owncloud.org/install/" target="_blank" rel="external">https://owncloud.org/install/</a> 下载最新的ownCloud Server 对于本文，我们使用owncloud-9.0.1 版本</p>
<img src="/images/owncloud/1.jpg">
<p>对于基于Debian发行版的Linux系统，web服务器的根目录为/var/www  我实际操作过程中似乎不可用，于是我就放在了html文件夹下。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">cd /var/www/html  #（网页目录）</div><div class="line">tar jxf owncloud-9.0.1.tar.bz2 -C  /var/www/html   #(解压至web目录)</div><div class="line">cd /var/www/html/owncloud	 #（进入owncloud web目录）</div><div class="line">mkdir data  	#(建立数据库目录)</div><div class="line">cd data</div></pre></td></tr></table></figure>
<p>####OwnCloud在安装的过程中需要对一些目录有写的权限，为此，web服务器用户（www-data对于基于Debian的系统）必须要拥有apps、data、config目录的权限。运行以下命令完成：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">#data 目录下</div><div class="line">sudo chown -R www-data:www-data data </div><div class="line">sudo chown -R www-data:www-data config </div><div class="line">sudo chown -R www-data:www-data apps</div></pre></td></tr></table></figure>
<p>还需要修改下配置文件：<br>（网上说法不一,有说是 /etc/apache2/sites-enabled/000-default.conf ，还有说 /etc/httpd/conf.d/owncloud.conf 不过我没找到此文件）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo vi /etc/apache2/apache2.conf</div></pre></td></tr></table></figure></p>
<p>修改如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;Directory /var/www/&gt;</div><div class="line">        Options Indexes FollowSymLinks</div><div class="line">        AllowOverride All</div><div class="line">        Require all granted</div><div class="line">&lt;/Directory&gt;</div></pre></td></tr></table></figure></p>
<p>打开浏览器，输入<a href="http://IP/owncloud" target="_blank" rel="external">http://IP/owncloud</a> </p>
<img src="/images/owncloud/2.jpg">
<p>电脑上装一下owncloud的客户端，然后操作比较简单</p>
<p>看我的同步效果：</p>
<img src="/images/owncloud/3.jpg">
<img src="/images/owncloud/4.jpg">
<img src="/images/owncloud/5.jpg">
<p>这是局域网的访问，如果没公网ip，则可用ngrok内网转发来实现外网访问。</p>
<p>参考:<br><a href="http://jjliu.blog.ustc.edu.cn/198/" target="_blank" rel="external">使用OwnCloud创建私有云</a><br><a href="https://alexlee.cn/%e6%a0%91%e8%8e%93%e6%b4%beraspberry-pi%e5%ae%89%e8%a3%85owncloud%e6%90%ad%e5%bb%ba%e7%a7%81%e6%9c%89%e4%ba%91%e6%9c%8d%e5%8a%a1%e5%99%a8/" target="_blank" rel="external">树莓派Raspberry Pi安装ownCloud搭建私有云服务器</a><br><a href="http://www.linuxidc.com/Linux/2013-08/89380.htm" target="_blank" rel="external">Ubuntu 12.04下使用ownCloud搭建私人存储云</a><br><a href="http://www.linuxidc.com/Linux/2014-03/98757.htm" target="_blank" rel="external">CentOS 6.3搭建个人私有云存储ownCloud</a>  </p>
]]></content>
      
        <categories>
            
            <category> 2016-04 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 树莓派 </tag>
            
            <tag> 云服务 </tag>
            
            <tag> owncloud </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Raspberry Pi 3 ngrok内网穿透]]></title>
      <url>http://wenjiehe.com/2016/04/28/2016-04-28-raspberry-ngrok/</url>
      <content type="html"><![CDATA[<p>现在很多宽带服务都不分公网ip，那怎么让外网访问树莓派的服务呢？<br>ngrok 就可以实现外网访问树莓派，ngrok的具体介绍和实现就不说了，主要来看看怎么使用。<br><a id="more"></a></p>
<p>我用的是国内的ngrok.cc 的服务。</p>
<p>去ngrok.cc 下载arm版本的客户端，解压。<br>修改 ngrok.cfg 文件 </p>
<p>这里的token填写在 <a href="http://www.ngrok.cc/index.php/Member/index.html" target="_blank" rel="external">Ngrok管理中心</a> 的token</p>
<img src="/images/ngrok/1.jpg">
<p>我们需要在域名列表里面注册一下：</p>
<img src="/images/ngrok/2.jpg">
<p>我这里用的是自己的域名，还需要在dns解析 加一条记录</p>
<img src="/images/ngrok/3.jpg">
<p>不运行服务，直接输入域名，应该可以看到如下文字：</p>
<img src="/images/ngrok/4.jpg">
<p>说明这部分没有问题了~</p>
<p>接下来启动服务：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./ngrok -config ngrok.cfg start test</div></pre></td></tr></table></figure></p>
<p>这样表示运行成功：  </p>
<img src="/images/ngrok/5.jpg">
<p>打开浏览器，刷新一下刚才的界面：</p>
<img src="/images/ngrok/6.jpg">
<p>我们把上一次的owncloud也给加上<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">test.wenjiehe.com/owncloud</div></pre></td></tr></table></figure></p>
<img src="/images/ngrok/7.jpg">  
<p>可以照常使用~~</p>
<p>可能遇到 ####正在访问来自不信任域名的服务器,请联系你的系统管理员。如果你是系统管理员，配置config/config.php文件中参数”trusted_domain”<br>则修改下config.php</p>
<pre><code>sudo vi /var/www/html/owncloud/config/config.php
</code></pre><img src="/images/ngrok/8.jpg">
<p>同时再提供下android版本的登录成功的截图：</p>
<img src="/images/ngrok/9.jpg">
<img src="/images/ngrok/10.jpg">
<p>如果没有自己的域名也可以使用ngrok.cc提供的二级域名。</p>
<p>参考:<br><a href="http://ngrok.cc/" target="_blank" rel="external">Sunny-Ngrok内网转发</a><br><a href="https://www.chiphell.com/thread-1534193-1-1.html" target="_blank" rel="external">“正在访问来自不信任域名的服务器”的解决办法</a><br><a href="https://www.zhihu.com/question/42433730" target="_blank" rel="external">如何让树莓派可以被外网访问？</a></p>
]]></content>
      
        <categories>
            
            <category> 2016-04 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 树莓派 </tag>
            
            <tag> ngrok </tag>
            
            <tag> 内网穿透 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Raspberry Pi 3 发微博]]></title>
      <url>http://wenjiehe.com/2016/04/24/2016-04-24-raspberry-weibo/</url>
      <content type="html"><![CDATA[<p>本打算做个微博机器人，但是貌似微博把接口的权限改变了，不是很好弄，所以这里先做个半自动的。</p>
<p>首先去open.weibo.com 先建立自己的应用，你会得到一个 App Key App Secret ，除此以外我们需要在 应用信息-高级信息中，把授权回调页 写成<a href="https://api.weibo.com/oauth2/default.html" target="_blank" rel="external">https://api.weibo.com/oauth2/default.html</a> 取消授权回调页 同样即可<br><a id="more"></a><br><img src="/images/weibo/1.jpg"></p>
<pre><code class="python"><span class="comment">#coding=utf-8</span>

<span class="comment">#! /usr/bin/python</span>
<span class="string">"""
引入Python SDK的包
"""</span>
<span class="keyword">import</span> weibo

<span class="string">"""
授权需要的三个信息，APP_KEY、APP_SECRET为创建应用时分配的，CALL_BACK在应用的设置网页中
设置的。【注意】这里授权时使用的CALL_BACK地址与应用中设置的CALL_BACK必须一致，否则会出
现redirect_uri_mismatch的错误。
"""</span>
APP_KEY = <span class="string">'21523394XX'</span>  
APP_SECRET = <span class="string">'eb0da29dd163c64ec26dc6afc3b7XXXX'</span>  
CALL_BACK = <span class="string">'https://api.weibo.com/oauth2/default.html'</span>

<span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">()</span>:</span>  
<span class="comment">#weibo模块的APIClient是进行授权、API操作的类，先定义一个该类对象，传入参数为APP_KEY, APP_SECRET, CALL_BACK</span>
        client = weibo.APIClient(APP_KEY, APP_SECRET, CALL_BACK)  
<span class="comment">#获取该应用（APP_KEY是唯一的）提供给用户进行授权的url</span>
        auth_url = client.get_authorize_url()  
<span class="comment">#打印出用户进行授权的url，将该url拷贝到浏览器中，服务器将会返回一个url，该url中包含一个code字段（如图1所示）</span>
        <span class="keyword">print</span> <span class="string">"auth_url : "</span> + auth_url  
<span class="comment">#输入该code值（如图2所示）</span>
        code = raw_input(<span class="string">"input the retured code : "</span>)  
<span class="comment">#通过该code获取access_token，r是返回的授权结果，具体参数参考官方文档：</span>
<span class="comment"># http://open.weibo.com/wiki/Oauth2/access_token</span>
        r = client.request_access_token(code)  
<span class="comment">#将access_token和expire_in设置到client对象</span>
        client.set_access_token(r.access_token, r.expires_in)

<span class="comment">#以上步骤就是授权的过程，现在的client就可以随意调用接口进行微博操作了，下面的代码就是用用户输入的内容发一条新微博</span>

        <span class="keyword">while</span> <span class="keyword">True</span>:  
                <span class="keyword">print</span> <span class="string">"Ready! Do you want to send a new weibo?(y/n)"</span>  
                choice = raw_input()  
                <span class="keyword">if</span> choice ==<span class="string">'y'</span> <span class="keyword">or</span> choice ==<span class="string">'Y'</span>:  
                        content = raw_input(<span class="string">'input the your new weibo content : '</span>)  
                        <span class="keyword">if</span> content:  
<span class="comment">#调用接口发一条新微薄，status参数就是微博内容</span>
                                client.statuses.update.post(status=content)  
                                <span class="keyword">print</span> <span class="string">"Send succesfully!"</span>  
                                <span class="keyword">break</span>;  
                        <span class="keyword">else</span>:  
                                <span class="keyword">print</span> <span class="string">"Error! Empty content!"</span>  
                <span class="keyword">if</span> choice ==<span class="string">'n'</span> <span class="keyword">or</span> choice ==<span class="string">'N'</span>:  
                        <span class="keyword">break</span>

<span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:  
        run()
</code></pre>
<p>weibo 这个库来自于 廖雪峰-Python微博SDK <a href="http://github.liaoxuefeng.com/sinaweibopy/" target="_blank" rel="external">http://github.liaoxuefeng.com/sinaweibopy/</a></p>
<p>运行之后会让你登录：</p>
<img src="/images/weibo/2.jpg">
<p>我们复制控制台显示出来的链接，粘贴到浏览器去获得code：</p>
<img src="/images/weibo/3.jpg">
<p>如果第一次登微博，就需要输一下帐号，密码，我的之前已经登陆过了。</p>
<p>看地址栏最后有一串字符：</p>
<img src="/images/weibo/4.jpg">
<p>然后会问你要不要发微博，我们来发一条：</p>
<img src="/images/weibo/5.jpg">
<p>去微博看一看：</p>
<img src="/images/weibo/6.jpg">
<p>在之前，微博api是可以自己获得code，不需要手动到浏览器去粘贴获得，但是现在好像不可以了（但是还是有途径的），下一次再试试能不能自动登录。</p>
]]></content>
      
        <categories>
            
            <category> 2016-04 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 树莓派 </tag>
            
            <tag> weibo </tag>
            
            <tag> 微博 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Raspberry Pi 3 搭建本地DNS服务器]]></title>
      <url>http://wenjiehe.com/2016/04/23/2016-04-23-raspberry-dnsmasq/</url>
      <content type="html"><![CDATA[<p>需求：上网时莫名地弹出广告，或者莫名的流量被消耗掉导致网速变慢。其次是部分网站域名不能正常被解析，莫名其妙地打不开，或者时好时坏。<a id="more"></a></p>
<p>管理下局域网的DNS（双十一的时候，把某宝网站直接给解析到本地ip，打不开网页，O(∩_∩)O哈哈~）</p>
<p>这里我用的是dnsmasq</p>
<p>安装比较简单：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install -y dnsmasq</div></pre></td></tr></table></figure></p>
<p>下面我们就需要配置dnsmasq了，配置文件一般位于路径/etc/dnsmasq.conf</p>
<p>这个文件里全是注释的内容，相当于空文件。我先备份了此文件，然后修改了一些配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">resolv-file=/etc/wenjie_dns.conf</div><div class="line">strict-order</div><div class="line">cache-size=1500</div><div class="line">listen-address=127.0.0.1,218.195.54.90</div><div class="line">address=/taobao.com/218.195.54.90</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">resolv.conf:文件主要的作用是DNS客户机配置文件，设置DNS服务器的IP地址及DNS域名.如果我们不配置的话，默认使用 /etc/resolv.conf 网上有人说每次开机此文件都会被重写，所以就自己指定/etc/wj_dns.conf</div><div class="line"></div><div class="line">strict-order: 按照resolv.conf中nameserver顺序依次使用，本行被注释后会随机的调用nameserver</div><div class="line"></div><div class="line">cache-size: 缓存解析条数，默认是150</div><div class="line"></div><div class="line">listen-address: 监听地址，listen-address=127.0.0.1，表示这个 dnsmasq 本机自己使用有效。</div><div class="line">	注意：如果你想让本机所在的局域网的其它电脑也能够使用上Dnsmasq，应该把本机（树莓派）的局域网IP加上去：listen-address=218.195.54.90（树莓派的ip）,127.0.0.1</div><div class="line"></div><div class="line">address:很明显就是我们想劫下的域名了</div></pre></td></tr></table></figure>
<p>在/etc/wenjie_dns.conf 写入 DNS服务器，本地的当然得放在第一个，下面的写其它稳定的就行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">nameserver 127.0.0.1</div><div class="line">nameserver 202.206.240.13</div><div class="line">nameserver 202.206.240.12</div></pre></td></tr></table></figure></p>
<p>重启服务：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo service dnsmasq restart</div></pre></td></tr></table></figure></p>
<p>将Dnsmasq作为本地DNS服务器使用，直接修改电脑的本地DNS的IP地址即可。</p>
<img src="/images/dns/1.jpg">
<p>ping 一下试试</p>
<img src="/images/dns/2.jpg">  
<p>大功告成。</p>
<p>拦截一些广告，也可以把域名劫到127.0.0.1<br>bogus-nxdomain 这个配置文件里的选项可以反dns劫</p>
<p>对于dns缓存，可以用dig 命令看一下效果。<br>树莓派没有安装，可以安装一下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install dnsutils</div></pre></td></tr></table></figure></p>
<p>还有no-hosts 选项 ，默认情况下这是注释掉的, dnsmasq 会首先寻找本地的 /etc/hosts 文件，再去寻找缓存下来的域名, 最后去上游 dns 服务器寻找。所以/etc/hosts才是dnsmasq第一个寻找的地方。</p>
<p>参考:<br><a href="http://www.tuicool.com/articles/bUn2Uz" target="_blank" rel="external">关于dnsmasq的使用配置</a><br><a href="http://skypegnu1.blog.51cto.com/8991766/1641149" target="_blank" rel="external">Raspberry Pi （树莓派）折腾记之一</a><br><a href="http://www.xiaobaidonghui.cn/?p=400#more-400" target="_blank" rel="external">树莓派瞎玩~9~dns服务器</a><br><a href="http://www.freehao123.com/dnsmasq/" target="_blank" rel="external">Dnsmasq安装与配置-搭建本地DNS服务器 更干净更快无广告DNS解析</a>  </p>
]]></content>
      
        <categories>
            
            <category> 2016-04 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 树莓派 </tag>
            
            <tag> dnsmasq </tag>
            
            <tag> dns </tag>
            
            <tag> 局域网缓存 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Raspberry Pi 3 中文显示及输入+百度云传输]]></title>
      <url>http://wenjiehe.com/2016/04/22/2016-04-22-raspberry-baiduyun/</url>
      <content type="html"><![CDATA[<p>树莓派系统显示中文的话，大部分都是一个的小方块，还好我们有非常无私的开源者：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install ttf-wqy-zenhei</div></pre></td></tr></table></figure></p>
<p>文泉驿的开源中文字体，树莓派全网唯一的开源中文字体库</p>
<p>能显示中文，输入也是必不可少的：<a id="more"></a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install scim-pinyin</div></pre></td></tr></table></figure></p>
<p>快捷键也是Ctrl+空格<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo raspi-config</div></pre></td></tr></table></figure></p>
<img src="/images/baiduyun/1.jpg">  
<p>然后选择第五项Internationalisation Options，change_locale，在Default locale for the system environment:中选择zh_CN.UTF-8</p>
<p>重启就可以生效啦~</p>
<p>下面装神器：百度云~</p>
<p><a href="https://github.com/houtianze/bypy" target="_blank" rel="external">https://github.com/houtianze/bypy</a><br>这是地址，把它下载到树莓派上，解压。</p>
<p>我的树莓派好多python库都装了，所以直接：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./bypy.py info</div></pre></td></tr></table></figure></p>
<p>在浏览器中粘贴那个网址，再输入你的百度账号，<br>会得到一串授权码。</p>
<img src="/images/baiduyun/2.jpg">  
<p>粘贴到刚才的终端上：</p>
<img src="/images/baiduyun/3.jpg">  
<p>好了，至此就搞定了~</p>
<p>下面测试下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">显示使用帮助和所有命令（英文）: </div><div class="line">bypy.py </div><div class="line"></div><div class="line">更详细的了解某一个命令： </div><div class="line">bypy.py help &lt;command&gt; </div><div class="line"></div><div class="line">显示在云盘（程序的）根目录下文件列表： </div><div class="line">bypy.py list </div><div class="line"></div><div class="line">把当前目录同步到云盘： </div><div class="line">bypy.py syncup </div><div class="line">or </div><div class="line">bypy.py upload </div><div class="line"></div><div class="line">把云盘内容同步到本地来： </div><div class="line">bypy.py syncdown </div><div class="line">or </div><div class="line">bypy.py downdir / </div><div class="line"></div><div class="line">## 比较本地当前目录和云盘（程序的）根目录（这个很有用）：## </div><div class="line">bypy.py compare</div></pre></td></tr></table></figure></p>
<p>上传下，看一下我的百度云，有了！</p>
<img src="/images/baiduyun/4.jpg"> 
<p>下载：</p>
<img src="/images/baiduyun/5.jpg"> 
]]></content>
      
        <categories>
            
            <category> 2016-04 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 树莓派 </tag>
            
            <tag> 中文显示输入 </tag>
            
            <tag> 百度云 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Raspberry Pi 3 wifi问题]]></title>
      <url>http://wenjiehe.com/2016/04/21/2016-04-21-raspberry-wifi-problems/</url>
      <content type="html"><![CDATA[<p>树莓派自带wifi模块，应该说是很实用的功能，用法其实和USB wifi一样使用，但是树莓派3死活连接不上我的wifi，于是我就参照USB wifi的使用。<br><a id="more"></a><br>先用SSH登陆：</p>
<img src="/images/wifi/1.jpg">  
<img src="/images/wifi/2.jpg"> 
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo vi /etc/wpa_supplicant/wpa_supplicant.conf</div></pre></td></tr></table></figure>
<p>由于回宿舍，没有显示器，所以需要直接修改此文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">network=&#123;</div><div class="line">        ssid=&quot;ssid&quot;</div><div class="line">        psk=&quot;password&quot;</div><div class="line">        key_mgmt=WPA-PSK</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>按照道理说，直接点图形界面的wifi连接，输入密码就可以了，然而我的死活就是不行</p>
<p>尝试加入一些配置选项：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">proto=WAP2</div><div class="line">pairwise=TKIP</div><div class="line">group=TKIP</div></pre></td></tr></table></figure></p>
<p>依旧不行</p>
<p>于是我就换一种方法就行修改：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">sudo vim /etc/network/interfaces</div><div class="line"></div><div class="line">auto wlan0</div><div class="line">iface wlan0 inet dhcp</div><div class="line">    wpa-conf /etc/wpa_supplicant/wpa_supplicant.conf</div></pre></td></tr></table></figure></p>
<p>依旧不行。。</p>
<p>后来</p>
<p>……</p>
<p>……</p>
<p>……</p>
<p>……</p>
<p>（这是个悲伤的故事）</p>
<p>发现路由器是斐讯的，网上有人说不支持、、不支持。。。</p>
<p>于是我试了下我手机开的热点，直接在图形化界面就连上了……</p>
<p>折腾了一天，好了，wifi算是可以用了（悲伤好大）</p>
<p>总结：wifi好不好用看路由器，TP的可以，腾达的也行，同时最好使用最新的3-18的镜像，之前版本可以有问题。</p>
]]></content>
      
        <categories>
            
            <category> 2016-04 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 树莓派 </tag>
            
            <tag> wifi </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Raspberry Pi 3 开箱+扩容+samba]]></title>
      <url>http://wenjiehe.com/2016/04/20/2016-04-20-raspberry-dilatation-and-samba/</url>
      <content type="html"><![CDATA[<p>昨儿树莓3到手，今天先用了下电阻屏，帖子在此 ，花了些时间，今晚重点吧树莓基础环境先搭建下。<a id="more"></a><br>开箱图：<br>Pi3和微雪的屏</p>
<img src="/images/samba/1.jpg"> 
<img src="/images/samba/2.jpg"> 
<p>说明书多国语言：</p>
<img src="/images/samba/3.jpg"> 
<p>正面照：</p>
<img src="/images/samba/4.jpg"> 
<p>背面：</p>
<img src="/images/samba/5.jpg"> 
<p>这个3的卡槽由以前的弹出式变成现在直插的，安装时候没有弹簧按压声。</p>
<p>安装很简单，去 <a href="http://downloads.raspberrypi.org/raspbian_latest" target="_blank" rel="external">http://downloads.raspberrypi.org/raspbian_latest</a> 下载最新镜像即可，用Win32DiskImager 软件写入TF卡。</p>
<p>到显示器上显示：</p>
<img src="/images/samba/6.jpg"> 
<p>接下来扩展下TF卡:<br>树莓派有傻瓜式方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo raspi-config</div></pre></td></tr></table></figure></p>
<p>直接修改下重启就0k了~<br>如果想自己弄可以看这篇帖子：<br><a href="http://bbs.hqchip.com/group-topic-id-35428.html" target="_blank" rel="external">http://bbs.hqchip.com/group-topic-id-35428.html</a></p>
<p>扩张后如下：</p>
<img src="/images/samba/7.jpg"> 
<p>安装samba的话和Nanopi什么的大同小异</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install samba</div><div class="line">sudo vi /etc/samba/smb.conf</div><div class="line"></div><div class="line">[global]</div><div class="line">        guest ok = yes</div><div class="line">        security =share</div><div class="line">[wj]</div><div class="line">        comment = User</div><div class="line">        path = /home/pi</div><div class="line">        create mask = 0777</div><div class="line">        directory mask = 0777</div><div class="line">        guest ok = yes</div><div class="line">        browseable = yes</div><div class="line"></div><div class="line">sudo smbd restart</div></pre></td></tr></table></figure>
<p>修改下权限：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chmod -R go+rwx /home/pi</div></pre></td></tr></table></figure></p>
<p>然后查看下ip，就可以在电脑上连接啦~</p>
<img src="/images/samba/8.jpg"> ]]></content>
      
        <categories>
            
            <category> 2016-04 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 树莓派 </tag>
            
            <tag> 扩容 </tag>
            
            <tag> samba </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[趁年轻，做点自己不喜欢的事]]></title>
      <url>http://wenjiehe.com/2015/11/27/2015-11-27-wechat-article-1/</url>
      <content type="html"><![CDATA[<p>大家都说你年轻的时候要多做点喜欢的事，等大些时候只能身不由己，为了生活而活。这话说的没错。可是有些时候，可当你说，我讨厌做这件事的时候，<b>你想过你为什么讨厌它么</b>？<a id="more"></a></p>
<p>你说，我从小就讨厌，这个说的太模糊。其实，有些时候，你只是第一次遇到它的时候，刚好，双方没有在同一频率。于是你就莫名其妙地开始讨厌它了。或者某一天，你听到你父母的一句牢骚，小伙伴的一句抱怨，你试都没试，然后就开始对它敬而远之了。<b>坚持一件事物总是那么不易，哪有放弃来的轻松自在呢？</b></p>
<p>于是，你一不小心开始对它有了不好的印象，久而久之，一晃一二十年，越长大，越对小时候的害怕加剧，于是，偶尔有人提及它的时候，你总是毫不犹豫地否决掉它：不，我不喜欢它，它太难了，太可怕了，让我喜欢上它？我连正视它的想法都没有……算了吧，恩，它也没什么好的。你不愿意面对它，于是内心开始否定它，细数它的种种缺点，给自己不面对的合理理由。大家都是用这种可笑的行为让自己的行为合理化。</p>
<p>讨厌一件事或一个人就此开始，而且往往恶性循环，严重一点就慢慢地变成心魔。所以还是趁着年轻，去看看你讨厌的那些东西。你真的有那么讨厌它么？</p>
<p>看看你的生活：你说你讨厌跑步，枯燥而无聊；讨厌游泳，一直在喝别人的洗澡水；讨厌看书，看着看着就有种昏昏欲睡的感觉；讨厌数字，说着都能说晕；讨厌外语，词汇、语法老是忘记……啊，你讨厌的东西太多了，而在不知不觉中，你爱上了电视剧、电影、游戏等能让你能置身非自然场景的虚拟世界，让你容易获得身心愉悦的地方，你说这才是你喜欢的，想要的。现代人的精神单调枯燥可能由此产生，大家都在做相似的东西，那些有点不同特点的人总是寥寥无几。可能说的有点夸张，虽然人类社会的进步，多是把人置身虚幻的世界，催化产生出社会上不存在的东西，但是大家进入此处，不是所有人都能驾驭，在虚拟的世界创造价值比在现实中困难很多：现实与虚幻的切换，足以使人烦恼。我没否定这样，但是大部分人都只是迷失在其中，只是把它当做逃避现实不如意的一个乌托邦。</p>
<p>你主观的不喜欢一件事物没有什么不对，但，你真的能这样一辈子？干嘛不趁着年轻，即使犯错，成本也不高的时候多尝试一下呢？</p>
<p>就是你小学被老师罚了跑了一个下午，你无力地咒骂，我讨厌跑步！</p>
<p>别人聚在一起开玩笑说游泳池的洗澡水真难喝，你就不太想去试试。</p>
<p>刚上学的时候，数学、外语没有好好听被老师嫌弃好久之后，就承认，我真的不喜欢，真的不行了。</p>
<p>你爱上了那些容易让人爱上的东西，让你高兴愉悦的东西，然后就迫不及待地向全世界宣布，<b>这就是我的命运！</b>人生有时候确实有这么随意，不过即刻的潇洒之后，能坚持下来的，自然忍受了一番苦楚与斗争。</p>
<p>年轻，这是多么好的资本啊，干嘛要将它捂在一样你本就草率的决定里呢？</p>
<p>看看学习，很多人都说，大学的专业越学感觉越不喜欢，后悔当年报了这么一个难的专业。但，有多少人大学学了四年，他们开学进来第一个问题是，<b>这个专业到底是什么？能干什么？</b>毕业的时候，被新生问及此问题时，还只能错愕地不知如何回答。你不了解它何谈喜不喜欢它呢？<b>你只是在为自己的没有学成找个借口罢了</b>。你越来越不喜欢其实可能就是低年级的时候没有学好基础知识，等到专业知识用到基础的时候，发现完全被甩开了，而且心态上突然绷紧根本达不到那种强度，没有人督促，上课即使你想认真听也没有机会听懂，不想学了，自然就讨厌了。我想，当初填报志愿的时候，你可能对这个专业不了解，但大致方向应该没错，大学的课程还没有难到专业之间完全不同的地步吧。换言之，你换个相似专业一样学不好。如果你还在学习中，不妨稍微沉下心来，你讨厌、喜欢不是空穴来风，放下你暂时的偏见，等到确信你真的真的不合适它，未必就晚了，不要忘记，<b>你还是年轻的</b>。</p>
<p>还有你所认为的，为生活才选择的工作呢？你有那么讨厌它么？讨厌是因为你对它的重复性的东西感到累心的缘故吧，无休止的表格数据，数以万行计的代码，按部就班的施工图纸，你早就对它们不耐烦了，要不是糊口饭吃，你不知把它甩的到多远。但你试着去重新审视一下，也许它们没有那么遭，可能只是一个想法的转换，你对它就没有那么糟心。如果你以一直重复的东西来看它们，自然无趣，稍微对它多想一点点，生活也增加点乐趣，顺便生活可能还改善一点。</p>
<p>你可能想说，我才没有那么多的时间来想这些，累不累。你的想法能决定你生活的前景。<b><u>你还那么年轻，谁给你的底气来让你信服，你现在的生活是一种不错的选择？</u></b></p>
<p><b>从不喜欢的东西试试，改变一下自己，趁年轻，折腾下自己的想法吧。</b></p>
<p>以上为2014年，我为我的公众号写的一周年文章，时至今日，公众号已经大半年不更新了，我也基本放弃它了。现在回头看看一些文章，也能感受到当时的稚嫩的思想的，汇总到此处，仅以此作为大学思想变化的一条线索吧，内容不作评价。这两天去一家单位应聘实习，也遇到了一点新的感触，再看到这篇文章，让我感慨万千了。</p>
]]></content>
      
        <categories>
            
            <category> 2015-11 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 思绪 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[计划下的牺牲]]></title>
      <url>http://wenjiehe.com/2015/11/22/2015-11-22-die-in-plan/</url>
      <content type="html"><![CDATA[<p>我个人很喜欢给自己定下具体数量的目标，比如今天晚上我要看多少多少页的书，如果最后因为没看完就不开心，敷衍般也要凑到那个页数，然而第二天其实还要再往前倒退点重新开始看。<a id="more"></a></p>
<p>我也渐渐知道这种上纲上线的任务指标多半意味着敷衍、草草了事（某些国人最喜欢干这些了），定任务本来是件好事，但如果僵化地制定就没什么意思了，就是个面子工程，求数量而不求质量，满足一下心中的虚荣心了吧？</p>
<p>然而这种虚荣心却感觉很难舍得丢弃，一来是因为自己这么做了好多年了……二来自己还真的想需要这些来安慰自己的——被努力就会有回报这句话灌输的太多了点，所以想看上去很努力，就算失败了，但也心安了。</p>
<p>近来我也一直努力在克服，原计划把某些章节看完，最后因为自己玩手机 (╯▽╰) 或者可能没有理解某些内容反复咀嚼等原因，也能安慰自己（还是在寻求个解脱咯？）质量第一，不求数量。然后强迫自己就看到这里，按照原来的计划做别的事情吧。</p>
<p>某个微信公众号就老是发文章，自己某个团队每天刷某一本书几页，坚持不懈终于看完了，我开始还特别特别佩服，自己也忍不住跟着做，做着做着还是蛮难坚持下去的，因为每天都要花时间在那上面，不能有一天掉下来，而且每天得消化那么多，还有前后知识的串联。想要做完这件事，绝对不能把它放置在一项课外活动上，而是得把它作为一个主项，优先去完成这件事，因为如果你给自己每天都定量的话，开始内容简单，复杂度不高，不需要结合新知识，比较容易上手，但到了后来，多个维度上难度在增长，如果还抱着轻松的心态完成，就是勉强完成任务，那也就只会慢慢变成了为了完成任务而完成任务了，这样也就没啥效果，不如就果断弃了。</p>
<p>这个礼拜，我想看uc/os系统进行移植的方法。书一开头就说，一直没有固定的套路，需要结合不同处理器而做不同的修改，对了，还得结合编译器。然后书就开始按着两套芯片的特点开始讲，两个在里面绕来绕去，突然觉得这书好渣，它讲的两套芯片，两种都大致学过，可是这么高要求的对他没的理解却很难达到（其实它重点就讲了简单的那一套，然而我还是基本都不记得那些知识了），后来只能反复前后对照着看，看到后面具体代码实现的部分，一步步地讲，然后对于前面说的每句话自己对比分析，看完之后都不禁感叹，真是本好书，每句话都有道理，而且把很多坑都先讲了出来。感觉这个礼拜看的量不多，100页还不足，相对于花的时间，可以说看的很慢很慢了，但是看的很细，虽然也会有时间不专注，但最后真的能读懂，还是得益于慢。快是需要的，但真的有些东西是慢出细活，年轻人最容易的就是性急了。</p>
<p>最近的一点点感想，妹纸(๑•ᴗ•๑)说怎么好久不写了，刚好也最近想写这些，就一鼓作气写完了，我发现写了几篇，文字逻辑还是如此的乱，就熄灯了，晚安。</p>
]]></content>
      
        <categories>
            
            <category> 2015-11 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 思绪 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[七月的时光]]></title>
      <url>http://wenjiehe.com/2015/07/27/2015-07-27-july-time/</url>
      <content type="html"><![CDATA[<p>七月发生了好多事情，最早的时候去了夏令营，也是第一次接触除了江苏，陕西以外的985高校，确实名校毕竟有名校的风采，感觉整个格局，气氛都不一样，偶尔看到了中南的实验室，确实比起我们学校来要强，环境，人员，氛围，看了一眼都感觉不一样。所以，要去个好的学校读研呀。<a id="more"></a></p>
<p>最遗憾的是，飞了9年的New Horizon，我却不能关注它飞掠风采，遥想06年，坐在电视机前看探索发现，也是那时候对天文渐渐有了感觉，近十年过去了，热情慢慢归于平淡，然后只要提起，现在还是会充满躁动呀。</p>
<p>做了半年的智能车也开始比赛，结果还好，主场之下，有压力也有动力，学长帮忙也很给力，确实是一个负责任的学长，明年可能就是我来了，也要加油。</p>
<p>差不多同时，NASA发现了据说迄今最像地球的系外天体，刚开始都不以为然，后来才发现似乎这关注度略高啊，顿时感觉自己有了两耳不闻窗外事的感觉了。</p>
<p>最后，还要感谢我的爸妈，事情多，说话少，见谅……还有TA，真的很对不起，我会拿出时间陪你们的，不会让你们永远等待。</p>
<p>Thanks a lot.</p>
]]></content>
      
        <categories>
            
            <category> 2015-07 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 思绪 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[大学，为什么我一直这么忙？]]></title>
      <url>http://wenjiehe.com/2015/04/30/2015-04-30-i-am-always-busy/</url>
      <content type="html"><![CDATA[<p>感觉我的大学一直处于忙碌，忙着上课，学习各种东西。我都一直在做什么呢？</p>
<p>大一的时候都比较认真，不光是学习上，对很多未知的事情都保持敬畏、探索的心。大一上老老实实学习着，没加入什么社团、组织，感觉比别人差了好多（无事恐惧症？），大一下虽然课程比较重，概念比较多，对于我这种上课上课就走神的人来说简直就是噩梦<a id="more"></a>，但居然还是花了很多时间来学习一些大家都学得软件，ps、ai、cad,lr..有些浅尝辄止，有些还是慢慢摸索了大半年的。大一没有花课外时间学习专业基础知识给以后的学习还是造成了好多困难，但学了这么多软件，还是很有用的，算把我带入大学生活了吧。</p>
<p>大二就开始不老实了，学了那些软件，刚好又和小伙伴成立了个社团，所以开学的时候还是挺忙的，第一届，但除了纳新，之后我们一直没什么事，所以基本也就忙了一个开学月吧，现在发现苗头不太对，有些同学已经有了很明显的专业学习优势，自己还像个小白，什么都不懂（关键上课还老走神），大二的懒散开始出现，不可避免，郁郁度过大二上。这半个学期主要忙于应付初露苗头的专业课，比较难，还没什么底子，上课又走神，过的很艰难，还没有什么回报。</p>
<p>大二下之前那个寒假好好想了一下，我不爱服输，有第一就要去争，何况专业这种大事呢，苦难时期，我有学会麻痹自己，去学java了，当时萌生考研换专业的打算，计算机还是相关专业吧，也比较好上手。认真了一个寒假，小有所成，也算重拾自信的坚实一步。然后那一学期带着自信（我有别人不会的东西，哼哼~），倒也有些普通的度过了大二下，这里的普通指，不是死拼命地学，与之对应的大三上……开始接触到了专业课，发现别人也并不是无所不知的神人，自己也是蛮厉害的，虽然起步差，但还是蛮努力的。</p>
<p>大三上是我觉得最拼命的时候，晚上每晚11:30回，虽然起床是8:00，但浪费的时间，平均下来极少，每个月也就几天不出去自习，考试那会自习到2:00，算错时间，被关在宿舍外面也是有过的。开学一个月准备计算机三级；自己独立做了项目，国庆忙了7天；然后在开始复习高数什么的，准备考研，这时候对自己专业也摸到了点门道，觉得没必要跨专业了，不过还是要读书，感觉自己能力很不够。遇到了专业可以说难度、要求最高的一门课，认真地学完，并尽力深刻理解，很感谢那时候拼命的自己，为自己省了好多事。</p>
<p>现在大三下，2015年到现在一直在做一个比赛，懂得很多时候其实到最后大家都差不多，东西就那么些，不过你就是玩不过人家，要谦虚啊，还差很远。</p>
<p>大学学了啥难的课程。基础课：高数上下、复变、概率论、线代、大物上下；专业课程：PLC、C、电路、电机、模数电、数据结构、电力电子技术、自动控制理论、现代控制理论、计算机控制技术、DSP、FPGA（有几门课没学好，老师讲的差，当时也不想学，大部分都尽心尽责认真了的）</p>
<p>课外学了啥。java，android，一堆单片机项目，计算机四级，一堆应用软件（ps、cad），驾照……</p>
<p>以上其实还好，也没写全，但重要的是找到了喜欢的人，和继续努力下去的动力。偶尔会懈怠，但我依旧明确我的方向，并且我知道自己就在路上。</p>
<p>写于2015-04-30，愿剩下的大学生活自己继续坚持下去。<br>生命不止，奋斗不息。</p>
]]></content>
      
        <categories>
            
            <category> 2015-04 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 思绪 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[大学中的一些学生]]></title>
      <url>http://wenjiehe.com/2015/03/28/2015-03-28-someone-in-university/</url>
      <content type="html"><![CDATA[<p>正值大三，现在的时候应该是对大学特别有感触的时候。趁此写写我所见的学生、老师，还有其他一些更多的真实的大学。<a id="more"></a></p>
<p>三年前走进学校，大家之间的区别可能存在，但肯定不会有现在的差别之大。之所以说是差别，而不是差距，应该是因为每个人来上大学之前的想法本来就不同，有人高考意外发挥好了，潜移默化地心底里有些放松自己，又离开父母，进入大学之后有些放松自己，过了一二三四年，看到周围的同学取得了不同的成绩，心底里羡慕，然而回看自己两手空空，想做很多事，却空有满腔热血了；有的人高考失意，大学决定好好学习……但更多的人，一不小心选了一个不知道干什么的专业，迷迷糊糊地学了三年，有时严于律己，兢兢业业，有时候徘徊不前，不知路在何方。</p>
<p>我，包括我所见到的绝大多数人都是上面大致分类的第三种。进入大学，眼花缭乱，不说校外的世界，就校内，图书馆看不完的书，宿舍里玩不尽的电脑、活动室画不完的海报、实验室调不完的bug……你能选择的东西有很多，有些人一头扎进其中一个、义无反顾，有些人顾左顾右，时而风生水起，时而顾影自怜。可能每一种选择都没有错，你不能用是非去评价，有些人会说，你这是在站在你的道德思想观点来评价，你这是道德胁迫（？），让我彻底平等地对待这些做法，我觉得对我可能还是很难，逃离自己的思想体系去思考完全不同的人总是很理解，我大概只能做到：就算你呆在宿舍玩游戏，那你玩出点名堂我也佩服你了。个人见解总有偏见，为什么要把自己的想法完全中立化呢？中立化的理由，大概只有：“关我什么事”了。</p>
]]></content>
      
        <categories>
            
            <category> 2015-03 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 思绪 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[走在归路上的一点思考]]></title>
      <url>http://wenjiehe.com/2015/02/08/2015-02-08-thinking-on-the-way/</url>
      <content type="html"><![CDATA[<h3 id="难得再来这种忙碌的单纯生活"><a href="#难得再来这种忙碌的单纯生活" class="headerlink" title="难得再来这种忙碌的单纯生活"></a>难得再来这种忙碌的单纯生活</h3><p>晚上在路边一家店吃了份饭，突然觉得现在的生活真是很矛盾，忙碌，似乎整天没有时间休息，吃饭也变得很急，安安稳稳地吃完饭再继续干活似乎都是在浪费时间。<a id="more"></a>但确实也很安逸，安逸的是，每天知道自己要去做什么，有什么没有完成，想怎样的办法去实现它。人活得很呆，很累，也可以说不累，不用想很多难以预料的社会性东西，窝在那里解决一个个能被解决的问题。</p>
<p>然而事情哪里都能被解决的呢？凡事又怎么能到永远不会出问题的时候呢？以前爱和自己说，挨过了这阵苦，以后就会好的；这两天累一下，过几天休息一下补回来，困难的日子就会过去……这种想法到没有什么不好的地方，只是老是抱着这种思维行事，完成的东西大多会有马虎，因为急于等待到自己设定的目标，最后收尾不免仓促，过后如果不出问题，大都懒得再扫尾了。这样容易形成做事马虎的习惯，以为自己抓住了核心就好，其实还有很多意想不到的小麻烦在你一次次马虎中错过了纠正，待到你的事情逐渐繁多起来，那些不介意的小麻烦偶尔跳出来，折腾的你分散精力去解决它们，长此以往，不免效率低下了。</p>
<p>我看，做些事情还是不要老用时间线压死人，虽然很多时候我们不到那个节骨眼不会去做，但是被逼到最后也就只能马马虎虎地做完，对于那些我们认为很重要的事情，还是在心中给它留下一个位置，慢慢地去做，不要想着抽个时间一次性解决，很多麻烦从来就不能一次性去除的。<br>​<br>所以，到底上，大学这种生活还是安逸的：挑战一直在出现，虽不是循规蹈矩地解决，却大多有前车之鉴。有时候感觉自己累的可笑，不过在重复前人，但想来前人的毕竟是前人，自己还是想要花时间去换取那一份属于自己的经历的。</p>
<p>任马路上车流不息，我安安静静地走在路上慢慢回去，珍惜此刻的平静。</p>
]]></content>
      
        <categories>
            
            <category> 2015-02 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 思绪 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[大三的结束与开始]]></title>
      <url>http://wenjiehe.com/2015/01/23/2015-01-23-end-and-go-on/</url>
      <content type="html"><![CDATA[<p>电脑反复中病毒，前段时间的重装系统暂时帮助度过了病毒危机，前几天突然开始又大量报毒，现在看来可能是移动硬盘和电脑交叉感染，这段时间也就弄了下博客，还是重新弄挺麻烦的，估计又得从头再来了。把电脑上的软件全卸了重装，估计得要几天时间慢慢恢复，慢慢来吧。<a id="more"></a>以前最讨厌这种几天的大工程，做不完的感觉很是压抑，现在任务越来越难，应该懂得有些事情注定要慢慢来，急不得，一天做一点，其实也就只要几天就能完成，所以还是要尽量带着平和的心态去做事情。</p>
<p>总结一下这二十几天：做了个课设，算是了却了我心中对我专业课的痛，大二的艰难过程可能会重来，但至少不是现在。人不可能在落后时一点焦躁情绪都没有，但不能光焦躁着，心里急，手头也不能闲着，否则你只有一直焦急的份了。不过这些天也忘记了和该交流的人交流，没有趁着一点点没有考试的时间去和人沟通，心里还是挺难过的。有时候不知道如何去沟通，怕突然地问候打搅了别人的学习，这里也说一声抱歉了。</p>
<p>每到期末心里会有一种落差感，离开的萧条景象，远离一个地方去另外的环境，课程结束准备新的挑战，总是让人略感疲惫啊，但不管过去这段时间是否精彩跌宕，还是死气沉沉，总有结束的时候，不敢面对过去，也不会拥有对将来变化的适应能力。</p>
<p>写于2015年1月23日离开宿舍去实验室前，略疲惫，就写这么多了。生活从不会停止忙碌与挑战，管好你的时间，想做的、要做的一定要趁早去做。</p>
]]></content>
      
        <categories>
            
            <category> 2015-01 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 思绪 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[人各有志，从来就不是你堕落的理由]]></title>
      <url>http://wenjiehe.com/2015/01/09/2015-01-09-everyone-has-different-aims/</url>
      <content type="html"><![CDATA[<h3 id="人各有志，从来就不是你堕落的理由"><a href="#人各有志，从来就不是你堕落的理由" class="headerlink" title="人各有志，从来就不是你堕落的理由"></a>人各有志，从来就不是你堕落的理由</h3><p>有些人就是喜欢用借口来狡辩自己的无能。<br>我也喜欢这样。事情做不好了就说自己没有全力以赴、没有细心，自己手头事情多来不及认真处理。比如写这篇文章，也是定下要求之后，磨了好几天才开始动手去做。但还好，我开始写了。<a id="more"></a></p>
<p>我听说过很多同学说不喜欢自己的专业。他们说高考的时候自己也什么都不知道，听家人亲戚的，或者自己听名字，网上搜索了一下，然后就填了这个专业。我当初其实也大抵如此，虽然学校专业全是我自己选的，但是当时自己基本没有专业概念，只知道自己应该适合学工科（似乎也只能），然后翻了一下招生资料，基本工科学校就那几个专业，于是我也就这么选了专业。可能那时候觉得自己似乎什么专业都能学吧，因此高中的课程比较单一，基本都是学了好多年的，学起来也比较得心应手。<br>然而大学课程基本上所有课程都是一学期的，所以适应速度要快，对于我这种适应能力不是很强的人来说很痛苦。我也曾因为一门很重要的专业课没有学精，很长时间不太喜欢自己的专业。想努力去学好，但心有余而力不足，客观条件以及主观状态不如人意，这门课始终是我一个心结，后来又有一件事让我更加对此失望，可以说信心丧失殆尽。于是为了不使自己被动，我去尝试相关学科的课程，由于初入此学习，开头不是很难，周围又缺少可以量化的东西来判断我的学习效率，所以可以说学的很自在。我一度以为我志在此，在这里能展现我的能力。<br>还好我还比较理性，我让自己花一定时间去做这个东西，如果我真的有兴趣，我就用心去学，朝此发展。<br>过程很曲折，结果就是失败了。<br>因为我又回到自己专业上。一门重要的专业课没学好事情还没有到无路可走的地步。一个偶然的机会，我得到了一次去再学习这门课程的机会。这个机会的由来，是来自于我另外学习的知识，由于周围没有人去做，这个机会顺理成章的被我抓住了。<br>我说我的经历，是想说，你可能并没有你所以为的讨厌它，因为你长时间与它打交道，又没有初始的乐趣点，所以是学乏了。如果让你去换别的专业，悲观一点话，你这时候别无选择，然后硬着头皮学下去；乐观一点，你换专业之前分析清楚，成功找到自己希望的专业。<br>但是，无论怎样，你<strong>短时间内</strong>做着你不太喜欢的事，不是意味着你可以彻底放弃它。不是来告诉自己：我不喜欢它，那我可以心安理得地不去做好它了。难道不应该来找办法摆脱这种不顺利么？一句“人各有志”，你真的以为自己能在志上走远？就算你觉得能走远，那你凭什么摆脱现在的困境，让人给你提供一个你想要的环境呢？唯一的办法就是，拿出你的实力来。<br>不喜欢手头的事，那就先<strong>让别人相信</strong>，你是真的不喜欢，而不是因为困难而放弃；<strong>让自己相信</strong>，自己有能力去做开始以为不行的事。为自己去做自己想做的事争取一个机会，自己努力创造改变的氛围，而不是大嘴一张：我不想干了。然后等环境自己变到合适。<br>对生活抱怨，就应该自己去告诉生活。我志不在此，但我不是不行。</p>
<hr>
<h3 id="我为什么要向它证明？我自己知道就行了，不用证明给任何人看吧？"><a href="#我为什么要向它证明？我自己知道就行了，不用证明给任何人看吧？" class="headerlink" title="我为什么要向它证明？我自己知道就行了，不用证明给任何人看吧？"></a><strong>我为什么要向它证明？我自己知道就行了，不用证明给任何人看吧？</strong></h3><p><strong>因为它手头有你想要的所有资源。想要的话，那就去告诉它，你有资格得到这些。</strong></p>
]]></content>
      
        <categories>
            
            <category> 2015-01 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 思绪 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[快去做吧]]></title>
      <url>http://wenjiehe.com/2015/01/04/2015-01-05-do-quickly/</url>
      <content type="html"><![CDATA[<h5 id="我总是想得很多，做的很少"><a href="#我总是想得很多，做的很少" class="headerlink" title="我总是想得很多，做的很少"></a>我总是想得很多，做的很少</h5><p>每天到床上之后，几乎总是会想很多，然后越想越睡不着，等实在想累了，可能就会睡着了。当时每次醒来之后却基本上都忘记了自己当时认为的，很正确、优秀的思考。不知不觉自己也对这种思考失去了信心，所谓该思考时不思考，不该思考时，却在思考。这大概不能称之为思考吧，应该叫乱想。<a id="more"></a></p>
<h5 id="我总是追求很多，放弃很少"><a href="#我总是追求很多，放弃很少" class="headerlink" title="我总是追求很多，放弃很少"></a>我总是追求很多，放弃很少</h5><p>有时候会以很忙的名义，说自己没有时间写点东西。其实有很多时间是被我们白白浪费的。我觉得我很喜欢形式化去做一样东西，或者说，这件事做到最后变成了形式。有时候为了心里的一个完美，就去做一些没有意义的事，其实这也是不尊重自己，可以说这也是被牵着鼻子走，只不过这个牵的人是你自己罢了。你并没有因为实际情况而做出一些非原则性的让步。</p>
<p>比如有时候，我根本就是没有心思看书了，但我却因为自己定下的计划，决定看到某某页再停。其实我大多时候根本就不想看了，那剩下的几页任务也是草草看完，基本没有效果。</p>
<p>我现在也在尝试去改变这些习惯。比如，在去年12月，我告诉自己要每天晚上都去自习。然而某两天因为一些事情感觉很累，于是对自己说，不用勉强自己做这些任务。如果在我平时，我可能还是去自习，即使去自习室里玩手机、睡觉（没错，我就是这么形式）。</p>
<p>可能有些人觉得，这其实是毅力的问题。确实是，但有时候我发现我被“毅力”这个词给绑架了。我很多时候都会以毅力的名义告诉自己不能放弃，但实际上呢？我这些事情很多都失败了，或者说效率很低。有些人平时不是很有毅力（或者感觉自己没有毅力），但有些人呢，可能做得所谓有毅力的事情太多了，反而觉得，自己有毅力做下去了，即使做差了，问心无愧了。我可能就属于后者，心灵鸡汤听多了，鸡血打足了。有时候放弃反而是正确的选择。有些人不懂坚持，而我属于那些不懂放弃的人。</p>
<p>此为属于第一篇文章，比较乱。东西用起来还很不熟练，还有很多话没说，以后还会有机会的，慢慢说，慢慢思考。</p>
]]></content>
      
        <categories>
            
            <category> 2015-01 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 思绪 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[如果你想去做的话]]></title>
      <url>http://wenjiehe.com/2015/01/03/2015-01-05-if-you-like/</url>
      <content type="html"><![CDATA[<h3 id="少年，年轻是用来做你不敢的事，而不是做你会的事的呢。"><a href="#少年，年轻是用来做你不敢的事，而不是做你会的事的呢。" class="headerlink" title="少年，年轻是用来做你不敢的事，而不是做你会的事的呢。"></a>少年，年轻是用来做你不敢的事，而不是做你会的事的呢。</h3>]]></content>
      
        <categories>
            
            <category> 2015-01 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 思绪 </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
